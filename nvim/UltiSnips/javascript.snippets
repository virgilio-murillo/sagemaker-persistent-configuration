# for -- for the for loop
# functions -- for creating a function
# while
# break -- for exiting loop
# continue -- for exiting loop iteration
# onHtmlScript -- for using javascript code in html
# import	-- for importing a javascript file
# delayOneSecond -- for delaying one second
# function
# output -- for a list of ways to play output
# variables -- for a list of variables
# strictMode -- for entering a stricMode more secure
#value -- for a list of possible values
# operators -- for a list of operators
# strings -- for a list of string operators
# numbersAndMath -- for a list of numbers and math
# dates -- for managing dates
# gettimes -- for getting times month,day,hour,minute
# methods -- for general methods
# inputValidation -- for reading information and validating it
# json -- for reading and writting a json file


# ==========================
# ========== html ======
# ==========================


# sk_html -- for a basic skeleton in html format
# info_html -- for putting the info in html format

# === common tags
# form -- for the form, a button opens a form
# label -- for creating a label
# div -- for a divition basic
# cu -- for a custom tag
# title
# body
# b -- so that you can get bold text
# h\d ==== this is for the different levels of headers

# p == for a paragraph
# em -- so that you can emphasize
# i -- so that you can get italic
# small -- so that you can get small text
# u -- for underline
# strike -- for deleted text
# # -- for comment
# marquee -- for scrolling text
# img -- for image
# table -- for creating a table
# ul -- unordered list
# ol -- ordered list
# a -- for a reference

# hr -- for a line divition
# br -- for line break
# sup -- for writing that goes below a normal line
# sub -- for text that is below the main line

# ====== common entity numbers ======
# cp -- &copy; -- for the copy right
# reg --&reg; -- for the registered symbol
# trd -- &trade; -- for the trade mark symbol


# ===== semantic elements  ======
# nav -- for navigation
# footer -- for the lower part of a page

# ==== input
# input -- a basic form of input

# ==========================
# ========== react crash course ======
# ==========================


















# ==========================
# ========== global functions ======
# ==========================


global !p
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""
	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"
	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]
	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''
	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal
post_jump "snip"
global !p
def returnCommandSplitted(command):
	cmd_arr = command.split('_')
	return_command = ""
	for a in cmd_arr:
		return_command += a + " "
	return_command = return_command[0:len(return_command)-1]
	return return_command
endglobal

post_jump "snip"
global !p

def parseStatement(i,j,k,stri):
	prev = ''
	twoBehind=''
	ans = ""
	for ch in stri:

		if ( ch == 'k' or ch == 'i' or ch == 'j' )  and prev == '$' and twoBehind == '\\':
			ans = ans[:-2]
			ans+=ch

		elif ch == 'i' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(i)
		elif ch == 'j' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(j)
		elif ch == 'k' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(k)
		elif ch == 'n' and prev == '\\':
			ans = ans[:-1]
			ans+="\n"

		else :
			ans+=ch

		twoBehind = prev
		prev = ch
	return ans

endglobal

global !p
def getMatchArr():
	cont=1
	arr = []
	while 1 :
		try :
			arr.append(match.group(cont))
			cont+=1
		except :
			break
	return arr
endglobal








# options im-> inword
snippet for "for the for loop"
for (var i = 0; i < 10; i++) {
document.write(i + ": " + i*3 + "<br />");
}
var sum = 0;
for (var i = 0; i < a.length; i++) {
sum + = a[i];
}               // parsing an array
html = "";
for (var i of custOrder) {
html += "<li>" + i + "</li>";
}
endsnippet


# options im-> inword
snippet while ""
var i = 1;                      // initialize
while (i < 100) {               // enters the cycle if statement is true
i *= 2;                     // increment to avoid infinite loop
document.write(i + ", ");   // output
}
endsnippet
# options im-> inword
snippet break ""
for (var i = 0; i < 10; i++) {
if (i == 5) { break; }          // stops and exits the cycle
document.write(i + ", ");       // last output number is 4
}
endsnippet
# options im-> inword
snippet continue "stops and exists cycle"
for (var i = 0; i < 10; i++) {
if (i == 5) { break; }          // stops and exits the cycle
document.write(i + ", ");       // last output number is 4
}
endsnippet

# options im-> inword
snippet onHtmlScript "for writting code in the html"
<script type="text/javascript">  ...
</script>
endsnippet
# options im-> inword
snippet import "for importing a js file"
<script src="filename.js"></script>
endsnippet
# options im-> inword
snippet delayOneSecond ""
setTimeout(function () {

}, 1000);
endsnippet

# options im-> inword
snippet function "for a function"
function addNumbers(a, b) {
return a + b; ;
}
x = addNumbers(1, 2);
endsnippet

# options im-> inword
snippet output "for putting output"
console.log(a);             // write to the browser console
document.write(a);          // write to the HTML
alert(a);                   // output in an alert box
confirm("Really?");         // yes/no dialog, returns true/false depending on user click
prompt("Your age?","0");    // input dialog. Second argument is the initial value
endsnippet

# options im-> inword
snippet variables "for variable init"

var a;                          // variable
var b = "init";                 // string
var c = "Hi" + " " + "Joe";     // = "Hi Joe"
var d = 1 + 2 + "3";            // = "33"
var e = [2,3,5,8];              // array
var f = false;                  // boolean
var g = /()/;                   // RegEx
var h = function(){};           // function object
const PI = 3.14;                // constant
var a = 1, b = 2, c = a + b;    // one line
let z = 'zzz';                  // block scope local variable
endsnippet


# options im-> inword
snippet strictMode "for writting secure code"
"use strict";   // Use strict mode to write secure code
x = 1;          // Throws an error because variable is not declared
endsnippet

# options im-> inword
snippet values "for getting the values"


false, true                     // boolean
18, 3.14, 0b10011, 0xF6, NaN    // number
"flower", 'John'                // string
undefined, null , Infinity      // special

endsnippet


# options im-> inword
snippet operators "for info on the operators"
a = b + c - d;      // addition, substraction
a = b * (c / d);    // multiplication, division
x = 100 % 48;       // modulo. 100 / 48 remainder = 4
a++; b--;           // postfix increment and decrement
endsnippet



# options im-> inword
snippet strings "for changing the strings"
var abc = "abcdefghijklmnopqrstuvwxyz";
var esc = 'I don\'t \n know';   // \n new line
var len = abc.length;           // string length
abc.indexOf("lmno");            // find substring, -1 if doesn't contain 
abc.lastIndexOf("lmno");        // last occurance
abc.slice(3, 6);                // cuts out "def", negative values count from behind
abc.replace("abc","123");       // find and replace, takes regular expressions
abc.toUpperCase();              // convert to upper case
abc.toLowerCase();              // convert to lower case
abc.concat(" ", str2);          // abc + " " + str2
abc.charAt(2);                  // character at index: "c"
abc[2];                         // unsafe, abc[2] = "C" doesn't work
abc.charCodeAt(2);              // character code at index: "c" -> 99
abc.split(",");                 // splitting a string on commas gives an array
abc.split("");                  // splitting on characters
128.toString(16);               // number to hex(16), octal (8) or binary (2)
endsnippet



# options im-> inword
snippet numbersAndMath "for numbers and math functions"
var pi = 3.141;
pi.toFixed(0);          // returns 3
pi.toFixed(2);          // returns 3.14 - for working with money
pi.toPrecision(2)       // returns 3.1
pi.valueOf();           // returns number
Number(true);           // converts to number
Number(new Date())      // number of milliseconds since 1970
parseInt("3 months");   // returns the first number: 3
parseFloat("3.5 days"); // returns 3.5
Number.MAX_VALUE        // largest possible JS number
Number.MIN_VALUE        // smallest possible JS number
Number.NEGATIVE_INFINITY// -Infinity
Number.POSITIVE_INFINITY// Infinity
Math.
var pi = Math.PI;       // 3.141592653589793
Math.round(4.4);        // = 4 - rounded
Math.round(4.5);        // = 5
Math.pow(2,8);          // = 256 - 2 to the power of 8
Math.sqrt(49);          // = 7 - square root 
Math.abs(-3.14);        // = 3.14 - absolute, positive value
Math.ceil(3.14);        // = 4 - rounded up
Math.floor(3.99);       // = 3 - rounded down
Math.sin(0);            // = 0 - sine
Math.cos(Math.PI);      // OTHERS: tan,atan,asin,acos,
Math.min(0, 3, -2, 2);  // = -2 - the lowest value
Math.max(0, 3, -2, 2);  // = 3 - the highest value
Math.log(1);            // = 0 natural logarithm 
Math.exp(1);            // = 2.7182pow(E,x)
Math.random();          // random number between 0 and 1
Math.floor(Math.random() * 5) + 1;  // random integer, from 1 to 5
endsnippet



# options im-> inword
snippet dates "for managing dates"
Sat May 07 2022 21:47:02 GMT-0500 (Central Daylight Time)
var d = new Date();
1651978022189 miliseconds passed since 1970
Number(d) 
Date("2017-06-23");                 // date declaration
Date("2017");                       // is set to Jan 01
Date("2017-06-23T12:00:00-09:45");  // date - time YYYY-MM-DDTHH:MM:SSZ
Date("June 23 2017");               // long date format
Date("Jun 23 2017 07:45:00 GMT+0100 (Tokyo Time)"); // time zone
endsnippet

# options im-> inword
snippet gettimes "for getting times"
var d = new Date();
a = d.getDay();     // getting the weekday

getDate();          // day as a number (1-31)
getDay();           // weekday as a number (0-6)
getFullYear();      // four digit year (yyyy)
getHours();         // hour (0-23)
getMilliseconds();  // milliseconds (0-999)
getMinutes();       // minutes (0-59)
getMonth();         // month (0-11)
getSeconds();       // seconds (0-59)
getTime();          // milliseconds since 1970
endsnippet

# options im-> inword
snippet methods "for a list of methods"
// convert to string: results "Bulldog,Beagle,Labrador"
dogs.join(" * ");                       // join: "Bulldog * Beagle * Labrador"
dogs.pop();                             // remove last element
dogs.push("Chihuahua");                 // add new element to the end
dogs[dogs.length] = "Chihuahua";        // the same as push
dogs.shift();                           // remove first element
dogs.unshift("Chihuahua");              // add new element to the beginning
delete dogs[0];                         // change element to undefined (not recommended)
dogs.splice(2, 0, "Pug", "Boxer");      // add elements (where, how many to remove, element list)
var animals = dogs.concat(cats,birds);  // join two arrays (dogs followed by cats and birds)
dogs.slice(1,4);                        // elements from [1] to [4-1]
dogs.sort();                            // sort string alphabetically
dogs.reverse();                         // sort string in descending order
x.sort(function(a, b){return a - b});   // numeric sort
x.sort(function(a, b){return b - a});   // numeric descending sort
highest = x[0];                         // first item in sorted array is the lowest (or highest) value
x.sort(function(a, b){return 0.5 - Math.random()});     // random order sort
endsnippet



# options im-> inword
snippet inputValidation "for validating data"
var x = document.getElementById("mynum").value; // get input value
try { 
if(x == "")  throw "empty";                 // error cases
if(isNaN(x)) throw "not a number";
x = Number(x);
if(x > 10)   throw "too high";
}
catch(err) {                                    // if there's an error
document.write("Input is " + err);          // output error
console.error(err);                         // write the error in console
}
finally {
document.write("</br />Done");              // executed regardless of the try / catch result
}
endsnippet


# options im-> inword
snippet json "for a json format"
var str = '{"names":[' +                    // crate JSON object
'{"first":"Hakuna","lastN":"Matata" },' +
'{"first":"Jane","lastN":"Doe" },' +
'{"first":"Air","last":"Jordan" }]}';
obj = JSON.parse(str);                      // parse
document.write(obj.names[1].first);         // access
Send
var myObj = { "name":"Jane", "age":18, "city":"Chicago" };  // create object
var myJSON = JSON.stringify(myObj);                         // stringify
window.location = "demo.php?x=" + myJSON;                   // send to php
Storing and retrieving
myObj = { "name":"Jane", "age":18, "city":"Chicago" };
myJSON = JSON.stringify(myObj);                 // storing data
localStorage.setItem("testJSON", myJSON);   
text = localStorage.getItem("testJSON");        // retrieving data 
obj = JSON.parse(text);
document.write(obj.name);
endsnippet


# ==========================
# ========== html ======
# ==========================



# options im-> inword
snippet info_html "information of the author"
<!---  Date: `date +%d/%B/%Y\ -\ %A` -->
<!---  Author: Virgilio Murillo Ochoa -->
<!---  personal github: Virgilio-AI -->
<!---  linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203 -->
<!---  contact: virgiliomurilloochoa1@gmail.com -->
<!---  web: virgiliomurillo.com --!>
endsnippet

# options im-> inword
snippet boot  "for bootstrap 5 "
		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
endsnippet

snippet sk_html
<!---  Date: `date +%d/%B/%Y\ -\ %A` -->
<!---  Author: Virgilio Murillo Ochoa -->
<!---  personal github: Virgilio-AI -->
<!---  linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203 -->
<!---  contact: virgiliomurilloochoa1@gmail.com -->
<!---  web: virgiliomurillo.com -->

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>$1</title>
</head>
<body>
	$2
</body>
</html>
endsnippet

# options im-> inword
snippet layout "for a django layout"

<!---  Date: `date +%d/%B/%Y\ -\ %A` -->
<!---  Author: Virgilio Murillo Ochoa -->
<!---  personal github: Virgilio-AI -->
<!---  linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203 -->
<!---  contact: virgiliomurilloochoa1@gmail.com
<!---  web: virgiliomurillo.com

<!DOCTYPE html>
<html lang="${1:en|es}">
	<head>
		<meta charset="UTF-8">
		<title>
			{% block title %}
			{% endblock %}
			Virgilio Murillo
		</title>
		{% load static %}
		<link rel="stylesheet" type="text/css" href="{% static 'css/${2:name_of_styles}.css' %}" />
	</head>
	<body>
		<!--cabezera de la pagina-->
		<header>
			<div id="logotipo">
				<!--logo django-->
				<img src="{% static 'images/${4:png_logo}.png' %}" />
				<h1>${5:title_logo}</h1>
			</div>

		</header>
		<nav>
			<ul>

			<!--- this is defined in the context -->
				{% for page in pages %}
				<li >
					<a href="/pagina/{{page.2}}">{{page.1}}</a>
				</li>
				{% endfor %}


			<!--- check if there is a user active and show this -->
				{% if user.first_name %}
				<li>
					<a href="articulos/">categorias</a>
					<ul>
						{% for category in categories %}
						<li>
							<a href="/categoria/{{category.0}}">{{category.1}} </a>
						</li>
						{% endfor %}
					</ul>
				</li>

				<li>
					<a href="/logout/">LogOut</a>
				</li>
				{% else %}


				<li>
					<a href="/registro/">Registro</a>
				</li>

				<li>
					<a href="/login/">Login</a>
				</li>
				{% endif %}

			</ul>
		</nav>

		<div class="barra">
			<span class="esquina-izquierda"></span>
			<span class="relleno-barra"></span>
			<span class="esquina-derecha"></span>
		</div>



		<div id="Content">
			<div class="box">

			<!--- this will be used for the actual content of the page -->
				{% block content %}

				{% endblock %}
			</div>
		</div>

		<footer>
			${3:footer &copy; }

		</footer>

	</body>
</html>
endsnippet

# options im-> inword
snippet login "for the basic login page importing the used template"
<!---  Date: `date +%d/%B/%Y\ -\ %A` -->
<!---  Author: Virgilio Murillo Ochoa -->
<!---  personal github: Virgilio-AI -->
<!---  linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203 -->
<!---  contact: virgiliomurilloochoa1@gmail.com
<!---  web: virgiliomurillo.com

{% extends 'layouts/layout.html' %}

{% block title %}
{{title}}
{% endblock %}


{% block content %}
	<h1 >{{title}}<h1/>
	
			{% if messages %}
			{% for message in messages %}
			<div class="alert alert-warning">
				{{message}}
			</div>
			{% endfor %}
			{% endif %}

	<form method="post" action="">
			{% csrf_token %}

			<label for="username"> Nombre de usuario</label>
			<input type="text" name="username"/>
			<label for="password">contrasenia</label>
			<input type="password" name="password"/>


			<input type="submit" value="login"/>
	</form>
{% endblock %}
endsnippet

# options im-> inword
snippet use_layout "for creating a page using the defined layout"

<!---  Date: `date +%d/%B/%Y\ -\ %A` -->
<!---  Author: Virgilio Murillo Ochoa -->
<!---  personal github: Virgilio-AI -->
<!---  linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203 -->
<!---  contact: virgiliomurilloochoa1@gmail.com
<!---  web: virgiliomurillo.com

{% extends 'layouts/layout.html' %}

{% block title %}
${1:title}
{% endblock %}


{% block content %}
	<h1 >$1<h1/>

{% endblock %}
endsnippet
# options im-> inword
snippet register "for html for registering"

<!---  Date: `date +%d/%B/%Y\ -\ %A` -->
<!---  Author: Virgilio Murillo Ochoa -->
<!---  personal github: Virgilio-AI -->
<!---  linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203 -->
<!---  contact: virgiliomurilloochoa1@gmail.com
<!---  web: virgiliomurillo.com

{% extends 'layouts/layout.html' %}

{% block title %}
{{title}}
{% endblock %}


{% block content %}
	<h1 >{{title}}<h1/>
	
			{{register_form.errors}}
	<form method="post" action="">
			{% csrf_token %}
			<!--
			{{register_form.as_p}}
			-->
			{% for field in register_form %}
				{{field.label}}
				{{field}}
			{% endfor %}

			<input type="submit" value="registrarse"/>
	</form>
{% endblock %}
endsnippet

# options im-> inword
snippet for "for in django"
{% for ${1:item} in ${2:items} %}

{% endfor %}
endsnippet

# options im-> inword
snippet checkUser "for checking the user"
{% if user.first_name %}
{% endif %}
endsnippet
# options im-> inword
snippet ckeditor "for setting the ckeditor"
			{{ form.media }}
			{{ form.as_p }}
endsnippet


snippet label
<label for="${1:id}">$2</label>
endsnippet


snippet figure
<figure>
$1
<figcaption>$2</figcaption>
</figure>
endsnippet

snippet div
<div>$1</div>
endsnippet

snippet footer
<footer>$1</footer>
endsnippet

snippet nav
<nav class="$1">$2</nav>
endsnippet



snippet cp
&copy;
endsnippet
# options im-> inword
snippet reg "registered mark" 
&reg;
endsnippet
# options im-> inword
snippet trd "traded mark" 
&trade;
endsnippet
snippet sub
<sub>$1</sub>
endsnippet

snippet sup
<sup>$1</sup>
endsnippet

snippet hr
<hr>$1</hr>
endsnippet


snippet b
<b> $1<b\>
endsnippet

snippet title
<title>$1</title>
endsnippet

snippet h1
<h1>$1</h1>
endsnippet

snippet h2
<h2>$1</h2>
endsnippet

snippet h3
<h3>$1</h3>
endsnippet

snippet h4
<h4>$1</h4>
endsnippet

snippet h5
<h5>$1</h5>
endsnippet

snippet h6
<h6>$1</h6>
endsnippet

snippet h7
<h7>$1</h7>
endsnippet

snippet h8
<h8>$1</h8>
endsnippet

snippet h9
<h9>$1</h9>
endsnippet

snippet p
<p>$1</p>
endsnippet

snippet cu
<$1>$2</$1>
endsnippet

snippet em
<em>$1</em>
endsnippet


snippet i
<i>$1</i>
endsnippet

snippet small
<small>$1</small>
endsnippet


snippet u "for underline"
<u>$1</u>
endsnippet

snippet strike "for deleted text"
<strike>$1</strike>
endsnippet

snippet a "for the reference"
<a href="$1">$2</a>
endsnippet



snippet #
<!--$1-->
endsnippet

snippet marquee " for scrolling text"
<marquee loop="-1" scrollamount="2" width="100%">$1</marquee>
endsnippet

snippet br "for line break" im
<br>
endsnippet


# options im-> inword
snippet img "images"
<img src="$1" width="$2" height="$3" border="0">
endsnippet


snippet table
table ${1:rows}x${2:columns}
endsnippet

post_jump "create_matrix_placeholders(snip)"

snippet "table (\d+)x(\d+)" "information of the snippet" r
`!p
# match.group(#) for the current match
# snip.rv for the return value
# snip.v.text -> the text
# snip.v.mode 'v' | 'V' | '^V'
def temp(arr):
	arrLen = len(arr)
	ans=""
	cont = 1
	ans+=" <!--params: rowspan="2" colspan="2"-->"
	ans+="<table>\n"
	for col in range(0,int(arr[0])):
		ans+="<tr>\n"
		for row in range(0,int(arr[1])):
			if cont == 1:
				ans+="<th> "+f"${cont}"+"</th>\n"
			else:
				ans+="<th>"+f"${cont}"+"</th>\n"
			cont+=1
		ans+="</tr>\n"
	ans+="</table>\n"
	return ans
matchArr = getMatchArr()
snip.rv = temp(matchArr)
`
endsnippet

post_jump "snip"



snippet ul
ulist ${1:number of elements}
endsnippet

snippet ol
olist ${1:number of elements}
endsnippet

post_jump "create_matrix_placeholders(snip)"

snippet "ulist (\d+)" "unordered list" r
`!p
def temp(arr):
	arrLen = len(arr)
	ans=""
	ans+="<ul>\n"
	cont = 1
	for num in range(0,int(arr[0])):
		if cont == 1:
			ans+="<li> "+f"${cont}"+"</li>\n"
		else:
			ans+="<li>"+f"${cont}"+"</li>\n"
		cont+=1
	ans+="</ul>\n"
	return ans
matchArr = getMatchArr()
snip.rv = temp(matchArr)
`
endsnippet

post_jump "snip"
post_jump "create_matrix_placeholders(snip)"


snippet "olist (\d+)" "ordered list" r
`!p
def temp(arr):
	arrLen = len(arr)
	ans=""
	ans+="<ol>\n"
	cont = 1
	for num in range(0,int(arr[0])):
		if cont == 1:
			ans+="<li> "+f"${cont}"+"</li>\n"
		else:
			ans+="<li>"+f"${cont}"+"</li>\n"
		cont+=1
	ans+="</ol>\n"
	return ans
matchArr = getMatchArr()
snip.rv = temp(matchArr)
`
endsnippet

post_jump "snip"

# options im-> inword
snippet inh "for the input"
<!--button checkbox-->
<!--color date -->
<!--datetime-local email-->
<!--file hidden -->
<!--image month -->
<!--number passwrod -->
<!--radio range-->
<!--reset search -->
<!--submit tel -->
<!--text time -->
<!--url week -->

<!--placeholder="" -->
<!--name="name" -->
<!--id="id" -->

endsnippet

snippet in
<input type="$1" id="$2" name="$2">
endsnippet

snippet form
<form action="/$1">$2</form>
endsnippet



# ==========================
# ========== react crash course ======
# ==========================

# options im-> inword
snippet create_react "for creating a react project"
pacman -S npm
install react development tools
npx create-react-app APP_NAME

npm start # to start the server in localhost:3000

endsnippet

# options im-> inword
snippet component "for a basic component syntax"
import React from 'react'

const Header = (props) => {
	return(
	<header>
		<h1>task tracker</h1>
		<h1> {props.title} <h1>
	</header>
	)
	}

Header.defultProps = {
	title: 'Task Tracker',
}

export default Header
endsnippet

# options im-> inword
snippet importComponent "for importing a component"
import Header from './components/Header'

# just use the <Header> inside the App return
endsnippet

# options im-> inword
snippet appjs "for a skeleton on the main app"

import Header from './components/Header'

// just use the <Header> inside the App return


function App() {
	constname="Virgilio"
	return(
		<divclassName="container">
		<Headertitle="hello"/>
		<h1>Thisisthemainparagraph</h1>
		<h2>hello{name}</h2>
		</div>
	);
}

export default App;
endsnippet

# options im-> inword
snippet cssInJs "for css in js"
<h1 style={style_name}> hola <h1>

cons style_name = {
	color: 'red',
	backgroundColor: 'black',
}
endsnippet

# options im-> inword
snippet button "for creating a button with google poppler"
<button className='btn' onClick={function}>
endsnippet
