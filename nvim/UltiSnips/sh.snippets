#din -- basic input window
#dout -- basic output window
#cfor -- c like for
#for -- for regular for
# array -- for creating an array in sh
# forArr -- for iterating through an array

# if -- basic if statement
# dyesno -- yes,no input box

# === file operations
# ifFile -- check if is a file
# forfolder -- traverse a folder recursively

# ===== loops =====
#
# recurseFolder -- recurse folder
# cfor -- for in a c way
# forFolder -- traverse folder non recursive
# for -- basic structure of a for loop
# forString -- char for loop on string
# forFile


# paths
# getScriptFolder -- for getting the script folder










global !p
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""
	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"
	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]
	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''
	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal
post_jump "snip"
global !p
def returnCommandSplitted(command):
	cmd_arr = command.split('_')
	return_command = ""
	for a in cmd_arr:
		return_command += a + " "
	return_command = return_command[0:len(return_command)-1]
	return return_command
endglobal

post_jump "snip"
global !p

def parseStatement(i,j,k,stri):
	prev = ''
	twoBehind=''
	ans = ""
	for ch in stri:

		if ( ch == 'k' or ch == 'i' or ch == 'j' )  and prev == '$' and twoBehind == '\\':
			ans = ans[:-2]
			ans+=ch

		elif ch == 'i' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(i)
		elif ch == 'j' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(j)
		elif ch == 'k' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(k)
		elif ch == 'n' and prev == '\\':
			ans = ans[:-1]
			ans+="\n"

		else :
			ans+=ch

		twoBehind = prev
		prev = ch
	return ans

endglobal

global !p
def getMatchArr():
	cont=1
	arr = []
	while 1 :
		try :
			arr.append(match.group(cont))
			cont+=1
		except :
			break
	return arr
endglobal














snippet sk

#!/usr/bin/zsh
# Date: `date +%d/%B/%Y\ -\ %A`
# Author: Virgilio Murillo Ochoa
# personal github: Virgilio-AI
# linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
$1
endsnippet

snippet dyesno
dialog --title "$1" --yesno "$2" ${3:17} ${4:70}

if [[ $? == 1 ]] 
then
echo "yes"
fi
endsnippet


snippet if
if [[ ${1:$(( $i + 1 )) == 2 } ]] || [[ $2 ]] 
then
	$3
elif $4
then
	$5
else 
	$6
fi
endsnippet

snippet cfor
for (( $1; ${2:i<= $number} ; ${3:i+=1} ))
do
done
endsnippet

snippet dout
dialog --title "$1" --msgbox "$2" ${3:width} ${4:height}
endsnippet

snippet din
if test -f "INPUT.txt"; then
	dialog --title "$1" --msgbox "warning the INPUT.txt file exist, delete it first" ${2:15} ${3:50}
	exit 1
fi
OUTPUT="INPUT.txt"
>$OUTPUT
dialog --stdout --title "$1" \
--inputbox "$@" 0 0 >$OUTPUT
$4=$(<$OUTPUT)
rm $OUTPUT
endsnippet


# ==========================
# ========== file operations ======
# ==========================
snippet ifFile
if test -f "$1"; then
	$2
fi
endsnippet

# ==========================
# ========== loops ======
# ==========================
snippet recurseFolder
recurseFolder(){
	# :h for name only
	# :t for name with extension
	for file in \$1/* ; do
		if [[ -d $file ]]
		then
			recurseFolder $file
		else
			${1:echo " file $file"}
		fi
	done
}
endsnippet

snippet cfor
for (( i=$1;i<$2;i$3 )); do
	$4
done
endsnippet
snippet forFolder
# :h for name only
# :t for name with extension
for ${1:file} in ${2:\$1/*} ; do
	${3:echo "\$file:t" # for filename only}
done
endsnippet

snippet for
for ${1:iterator} in ${2:\$array} ; do
	$3
done
endsnippet

# options im-> inword
snippet array "for creating an array"
array = (it1 it2 it3)
endsnippet


# options im-> inword
snippet forArr "for iterating through an array"

data=("Banana" "Apple" "Onion" "Peach")

for ((i=0;i< ${#data[@]} ;i+=1));
do
	echo ${data[i]}
done
endsnippet

snippet forString
# this doesn't prints new lines
for (( i=0; i<${#${1:string_name}}; i++ )); do
	printf "${$1:\$i:1}"
done
endsnippet

snippet forFile
for ${1:line} in "${(@f)"$(<${2:name.extendion})"}"
	{
		${3:echo $line}
	}
endsnippet

# options im-> inword
snippet getScriptFolder "for getting the script folder"

shopt -s extglob &&

MY_PATH=$(dirname "$0")            # relative
MY_PATH=$(cd "$MY_PATH" && pwd)    # absolutized and normalized
if [[ -z "$MY_PATH" ]] ; then
	# error; for some reason, the path is not accessible
	# to the script (e.g. permissions re-evaled after suid)
	exit 1  # fail
fi
endsnippet
