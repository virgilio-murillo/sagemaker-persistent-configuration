# ====== snippets for c#
# info -- for the info header snippet
# sk -- for the skeleton
# inherit -- for help on inheritance
# cout -- for printing
# readjson -- for reading a json file
# split -- for splitting string







# ===== Unity snippets
# controlMesh -- help for controlling a mesh
# controlMeshE -- control mesh the easy way
# delegate -- to deleagte functionality to other script
# cameraFollow -- to follo object relative and rotating
# cameraFollowNonRotate -- to follow the player without following
# text -- add text to the unity game

# ===== built int functions
# onCollision -- gets called when a collision


# ===== object functions
# disObj -- to make an object dissapear
















# options im-> inword
snippet info "information of the snippet"
// Date: 10/February/2022 - Thursday
// Author: Virgilio Murillo Ochoa
// personal github: Virgilio-AI
// linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
// contact: virgiliomurilloochoa1@gmail.com
// web: virgiliomurillo.com
endsnippet

# options im-> inword
snippet sk "skeleton"
using System;
class $1 {
	static void Main() {
	$2
	}
}
endsnippet

# options im-> inword
snippet inherit "for help on the inheritance"
// to use from an other file
// using filename
<access_modifier> class <base_class_name>
{
	// Base class Implementation
}

<access_modifier> class <derived_class_name> : <base_class_name>
{
	// Derived class implementation
}
endsnippet

# options im-> inword
snippet cout "for printing information"
Console.Write("$1");
endsnippet

# options im-> inword
snippet readjson "for reading a json file"
// in the terminal use:
// nuget install Newtonsoft.Json
// copy the dll into the same folder
// then create a sh file that contains

//mcs -reference:Newtonsoft.Json.dll program.cs
//mono program.exe

//using System;
//using System.IO;
//using Newtonsoft.Json;
//
//using (StreamReader r = new StreamReader("test.json"))
//{
//	string json = r.ReadToEnd();
//	dynamic array = JsonConvert.DeserializeObject(json);
//	foreach(var item in array)
//	{
//		//				foreach(var subitem in item)
//		//				{
//		//					Console.WriteLine(subitem);
//		//				}
//		Console.WriteLine(item);
//		//				Console.WriteLine("{0} {1}", item.Firstname, item.Lastname);
//		Console.WriteLine("-------");
//	}
// }

endsnippet

# options im-> inword
snippet split "for splitting string"
string[] $3 = $1.Split('$2');
endsnippet

# ==========================
# ========== avalonia ====== for GUI's
# ==========================

# options im-> inword
snippet createApp "for creating an avalonia app"
// create the app
dotnet new avalonia.mvvm -o MyApp

// run the program
// check the TargetFrameworksValue in the csproj file
dotnet run --framework [TargetFrameworksValue]
endsnippet
# options im-> inword
snippet Interface "for help on interfaces"

endsnippet

# options im-> inword
snippet wordToTrigger "information of the snippet"

endsnippet


# ==========================
# ========== Unity snippets ======
# ==========================
snippet controlMesh "a way to control a mesh"


// first regenerate project files
// edit, preferences, External Tools, Regenerate project files



// create a script for the mesh
// grab and drop as a component
// inside the main class create the rigid body

// private Rigidbody meshRigidBody;

// then inside the Start function initialize it

// meshRigidBody = gameObject.GetComponent<Rigidbody> ();

// get the name of the input from edit,projectSettings,Input Manager

// then read the input
// float horizontalMovement = Input.GetAxis("nameOFInput");
// float horizontalMovement = Input.GetAxis("nameOFInput");
// meshRigidBody.velocity = new Vector3(horizontalMovement,0,verticalMovement);


endsnippet

# options im-> inword
snippet delegate "delegate functions to other script"
// in the mesh scirpt use
// public delegate FuncType EventName(parameters);
// publi event EventName FuncName;

// in the game script use inside the main function
// public NameOFMeshFile VarName;

// inside start use 
// VarName.FuncName += FuncName;

// and create the FuncType FuncName(parameters) function

// note = drag and drop the mesh script into the game component when compiled
endsnippet

# options im-> inword
snippet controlMeshE "control mesh the easy way"
// create rigid body, install InputSystem packages, add Input system to the mesh


// using UnityEngine.InputSystem
// private float movementX
// private float movementY
// private float speed
// public float speed 


// Start -> rb = GetComponent<Rigidbody>();

// void OnMove(InputValue movementValue)
// {
// 	Vector2 movementVector = movementValue.Get<Vector2>();
// 	movementX = movementVector.x;
// 	movementY = movementVector.y;
// }
// 
// void FixedUpdate()
// {
// 	Vector3 movement = new Vector3(movementX,0.0f,movementY);
// 	rb.AddForce(movement*speed);
// }
endsnippet
# options im-> inword
snippet cameraFollow "to follow"
// just make the object parent of the camera so that they move together
endsnippet
# options im-> inword
snippet cameraFollowNonRotate 
// create the script
//public GameObject player;
//private Vector3 offset;

// Start -> offset = transform.position - player.transform.position;
// LateUpdate -> transform.position = player.transform.position + offset ;

endsnippet
# options im-> inword
snippet text "create a 2d text in the screen"
// right click on the hirarchy,UI, text mesh pro
// make the object child to canvas

// inside the script that you want to use
// public TextMeshProUGUI countText;
// modify by countText.text ;
endsnippet
# ==========================
# ========== builtInFunctions ======
# ==========================

# options im-> inword
snippet OnCollision "information of the snippet"
void OnCollisionEnter(Collision collision)
{
}
endsnippet



# ==========================
# ========== object functions ======
# ==========================

# options im-> inword
snippet disObj "disappear the object"
${1:object}.gameObject.SetActive(false);
endsnippet
