# sk - skeleton for a web page
# model - help for model
# update - help for alias
# view - help for view
# -- button - for creating a button in div
# -- div - for creating a div
# --------------------------------
# func - basic function
# list - create a basic list
# applyFuncToList - to apply a function into a list 
# record - like a python dictionary
# fromInt - convert int to string
# input - for text box in program
# strrev - for reversing a string



global !p
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""
	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"
	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]
	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''
	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal
post_jump "snip"
global !p
def returnCommandSplitted(command):
	cmd_arr = command.split('_')
	return_command = ""
	for a in cmd_arr:
		return_command += a + " "
	return_command = return_command[0:len(return_command)-1]
	return return_command
endglobal

post_jump "snip"
global !p

def parseStatement(i,j,k,stri):
	prev = ''
	twoBehind=''
	ans = ""
	for ch in stri:

		if ( ch == 'k' or ch == 'i' or ch == 'j' )  and prev == '$' and twoBehind == '\\':
			ans = ans[:-2]
			ans+=ch

		elif ch == 'i' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(i)
		elif ch == 'j' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(j)
		elif ch == 'k' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(k)
		elif ch == 'n' and prev == '\\':
			ans = ans[:-1]
			ans+="\n"

		else :
			ans+=ch

		twoBehind = prev
		prev = ch
	return ans

endglobal

global !p
def getMatchArr():
	cont=1
	arr = []
	while 1 :
		try :
			arr.append(match.group(cont))
			cont+=1
		except :
			break
	return arr
endglobal


snippet strrev
	String.reverse model.content
endsnippet
snippet input
input [ placeholder "$1", ${2:value model.content}, ${3:onInput Change} ] [] 
endsnippet

snippet fromInt
String.fromInt ${1:name_of_int}
endsnippet

snippet button
button[ ${1:onClick} ${2:case} ] [ text "$3" ]
endsnippet
snippet div
div [] [$1]
endsnippet

snippet record
${1:name} = 
{
--  nombre_str = "cadena"
--  nombre_Int = number
$2
}
endsnippet

snippet model
-- = { content: String }, = Int
type alias Model = $1
init : Model
-- = { content = ""}, = 0
init = $2
endsnippet

snippet update
-- = Change String, = Increment | Decrement
type Msg = $1
update : Msg -> Model -> Model
-- update msg model = 
--	case msg of
-- 	Increment ->
-- 		model + 1
-- case msg of
-- 	Change newContent -> 
-- 	{ model | content = newContent }
endsnippet

snippet view
view : Model -> Html Msg
view model = 
   div[]
   [
   -- input [ placeholder "Text to reverse", value model.content, onInput Change ] []
   -- div [] [ text(String.reverse model.content)]
   -- button,div
   ]
endsnippet

snippet func
${1:name_of_function} = $2
endsnippet

snippet list
${1:name} = [${2:csv}]
endsnippet

snippet applyFuncToList
List.map ${1:func} ${2:numbers}
endsnippet

snippet info
-- Date: `date +%d/%B/%Y\ -\ %A`
-- Author: Virgilio Murillo Ochoa
-- personal github: Virgilio-AI
-- linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
-- contact: virgiliomurilloochoa1@gmail.com
-- web: virgiliomurillo.com
endsnippet
snippet sk

-- Date: `date +%d/%B/%Y\ -\ %A`
-- Author: Virgilio Murillo Ochoa
-- personal github: Virgilio-AI
-- linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
-- contact: virgiliomurilloochoa1@gmail.com
-- web: virgiliomurillo.com


${3: -- make sure to elm init and git init in main folder}

module ${2:Main} exposing (main)

import Browser
import Html exposing (..)
import Html.Attributes exposing(..)
import List exposing(..)
import String exposing(..)
import Html.Events exposing (..)
-- Main
${1}
main = Browser.sandbox { init = init, update = update, view = view }

-- Model
-- Update
-- View
endsnippet
