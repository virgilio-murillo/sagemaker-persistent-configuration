# ===== comparisons =====
#
# ifFolder -- check if argument is a folder
# ifFile -- check if argument is a file
# compareFile -- compare file names
# if -- simple if
# ifOut -- check the output of a command in the if
#
# ===== loops =====
#
# recurseFolder -- recurse folder
# cfor -- for in a c way
# forFolder -- traverse folder non recursive
# for -- basic structure of a for loop
# forString -- char for loop on string
# forFile
#
# ===== main functionalities =====
#
# math -- for using math 
# arrlen -- for getting the length of an array
# split -- for spliting a string from a character
# function -- for creating a function
# stringArr -- a string as an array
# lineArr -- for an array of lines
# noOut -- for not output in command
# passStdin -- for passing sdin to command
# readString -- for reading a string
#
# ===== external =====
#
# sk -- for creating an skeletin
# info -- for giving info 
# variables -- explanation for different types of variables
# lineArr -- for line array 
#
# ====== dialog =====
# din -- for read string
# dout -- for information output
# dyesno -- for yes no window dialog











# ==========================
# ========== global snippets ======
# ==========================

global !p
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""
	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"
	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]
	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''
	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal
post_jump "snip"
global !p
def returnCommandSplitted(command):
	cmd_arr = command.split('_')
	return_command = ""
	for a in cmd_arr:
		return_command += a + " "
	return_command = return_command[0:len(return_command)-1]
	return return_command
endglobal

post_jump "snip"
global !p

def parseStatement(i,j,k,stri):
	prev = ''
	twoBehind=''
	ans = ""
	for ch in stri:

		if ( ch == 'k' or ch == 'i' or ch == 'j' )  and prev == '$' and twoBehind == '\\':
			ans = ans[:-2]
			ans+=ch

		elif ch == 'i' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(i)
		elif ch == 'j' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(j)
		elif ch == 'k' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(k)
		elif ch == 'n' and prev == '\\':
			ans = ans[:-1]
			ans+="\n"

		else :
			ans+=ch

		twoBehind = prev
		prev = ch
	return ans

endglobal

global !p
def getMatchArr():
	cont=1
	arr = []
	while 1 :
		try :
			arr.append(match.group(cont))
			cont+=1
		except :
			break
	return arr
endglobal






# ==========================
# ========== comparisons ======
# ==========================

snippet ifOut
${1:command} | grep -q "${2:the string to look for}"
if [ $? -eq 0 ]
then
	${3:command}
fi
endsnippet


snippet ifFolder
if [[ -d $file ]]
then
	${2:echo " folder "}
fi
endsnippet

snippet ifFile
if [[ -f $file ]]
then
	${1:echo "file"}
fi
endsnippet

snippet compareFile
# "$1" == *.cpp
endsnippet

snippet if
# use () instead of [[]] for some examples
if [[ $1 ]]
then
	$2
fi
endsnippet
# ==========================
# ========== loops ======
# ==========================
snippet recurseFolder

recurseFolder(){
	# :h for name only
	# :t for name with extension
	
	local deep=$2
	# create a local variable
	for file in $1/* ; do
		if [[ -d $file ]]
		then
			recurseFolder $file $((deep+1))
		else
			# use () instead of [[]] for some examples
			if [[ $DRY_RUN == 1 ]]
			then
				prt=""
				# add '-' for each level of deep
				for (( i=0;i<$deep;i++ )); do
					prt="$prt=="
				done
				file="${file:t}"
				echo "$prt $file"
			else
				echo "To Implement"
			fi
		fi
	done
}

endsnippet

snippet cfor
for (( i=$1;i<$2;i$3 )); do
	$4
done
endsnippet
snippet forFolder
# :h for name only
# :t for name with extension
for ${1:file} in ${2:\$1/*} ; do
	${3:echo "\$file:t" # for filename only}
done
endsnippet

snippet for
for ${1:iterator} in ${2:\$array} ; do
	$3
done
endsnippet

snippet forString
# this doesn't prints new lines
for (( i=0; i<${#${1:string_name}}; i++ )); do
	printf "${$1:\$i:1}"
done
endsnippet

snippet forFile
for ${1:line} in "${(@f)"$(<${2:name.extendion})"}"
	{
		${3:echo $line}
	}
endsnippet
# ==========================
# ========== main functionalities ======
# ==========================
snippet math
ans=$(( 3 + i ))
endsnippet
snippet arrlen
len=$#name
endsnippet
snippet split
# the character us just the character alone example : , .
# the string is the name of the string witouth the $ or anuthing else
${1:parts}=("${(@s[${2:character}])${3:string}}") # ex: a line
endsnippet

snippet function
function ${1:name} (){
	if (( $# < ${2:number of inputs} )); then
		${3:print "usage: $0 BEAN_NAME" >&2}
		exit -1
	fi
	$4
}
endsnippet

snippet readString
read ${1:string}
endsnippet

# ==========================
# ========== external ======
# ==========================

snippet sk

#!/usr/bin/zsh
###############################
# Author: Virgilio Murillo Ochoa
# Date: `date +%d/%B/%Y\ -\ %A`
# personal github: Virgilio-AI
# linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
# contact: virgiliomurilloochoa1@gmail.com
# web: virgiliomurillo.com
# #########################################


# edit this
FILE_PATH=""
WARNING=""
VERBOSE=0


# edit this
while [[ $# -gt 0 ]]; do
	case \$1 in
		-w|--warnig)
			WARNING="\$2"
			shift
			shift
			;;
		-p|--path)
			FILE_PATH="\$2"
			shift
			shift
			;;
		-v|--verbose)
			VERBOSE=1
			shift
			;;
		*)
			echo "Invalid argument "
			exit 1
			;;
	esac
done

# ==========================
# ========== Body ======
# ==========================
#  SCRIPT LOGIC GOES HERE

$1

# -----------------------------------------------------------------


endsnippet

snippet info

###############################
# Author: Virgilio Murillo Ochoa
# Date: `date +%d/%B/%Y\ -\ %A`
# personal github: Virgilio-AI
# linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
# contact: virgiliomurilloochoa1@gmail.com
# web: virgiliomurillo.com
# #########################################

endsnippet


snippet variables
# is very important avoid spaces when declaring 
# for integers floats etc just evaluate in $(( ))
# for strings the declaration is string=hola 
endsnippet

snippet lineArr
array=(${(ps:\n:)"\$(${1:command})"})
endsnippet

snippet noOut
>/dev/null 2>&1
endsnippet

snippet passStdin
(
${1:
echo "hola"
echo "hola2"
}
) | ${2:command}
endsnippet




















































































# ==========================
# ========== fixes for current bug ======
# ==========================

snippet sec
# ==========================
# ========== $1 ======
# ==========================
endsnippet

snippet sp
snippet $1
	$2
\endsnippet
endsnippet


snippet zsh
\`#!/usr/bin/zsh
$1\`
endsnippet

snippet vims
\`!v
\`
endsnippet
snippet visual
\${VISUAL}
endsnippet

snippet python
\`#!/usr/bin/python
$1\`
endsnippet
snippet pyint
# check the tutorial on how to do it
endsnippet

# ==========================
# ========== dialog information ======
# ==========================
#
snippet din
${4:var_name}=$(dialog --title "$1" --inputbox "${2:label}" 10 60 "${3:placeHolder}" 3>&1 1>&2 2>&3)

exitstatus=$?
	$5
if [ $exitstatus = 0 ]; then
else
    echo "You chose Cancel."
fi

endsnippet


snippet dout
dialog --title "$1" --msgbox "$2" ${3:10} ${4:60}
endsnippet


snippet dyesno
dialog --title "$1" --yesno "$2" ${3:17} ${4:70}

if [[ $? == 0 ]] 
then
echo "yes"
fi
endsnippet

snippet dok
dialog --title "$1" --msgbox "$2" 0 0
endsnippet

