# c++


# ======= c style snippets ========
# iar -- for init array
# imat -- for init mat
# resizestr - to resize a c string
# random - to input the random function
# copenFile - to open a file in c style format



# sk_ncurses - skeleton for ncurses
# ndoc - basic documentation for ncurses













global !p
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""
	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"
	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]
	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''
	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal

post_jump "snip"
global !p
def returnCommandSplitted(command):
	cmd_arr = command.split('_')
	return_command = ""
	for a in cmd_arr:
		return_command += a + " "
	return_command = return_command[0:len(return_command)-1]
	return return_command
endglobal

post_jump "snip"
global !p

def parseStatement(i,j,k,stri):
	prev = ''
	twoBehind=''
	ans = ""
	for ch in stri:

		if ( ch == 'k' or ch == 'i' or ch == 'j' )  and prev == '$' and twoBehind == '\\':
			ans = ans[:-2]
			ans+=ch

		elif ch == 'i' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(i)
		elif ch == 'j' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(j)
		elif ch == 'k' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(k)
		elif ch == 'n' and prev == '\\':
			ans = ans[:-1]
			ans+="\n"

		else :
			ans+=ch

		twoBehind = prev
		prev = ch
	return ans

endglobal

global !p
def getMatchArr():
	cont=1
	arr = []
	while 1 :
		try :
			arr.append(match.group(cont))
			cont+=1
		except :
			break
	return arr
endglobal


snippet iar
for(int i=0;i<$1;i++) $2[i] = $3;
endsnippet
snippet imat
for(int i=0;i<$2;i++)
{
	for(int j=0;j<$2;j++)
	{
		$3[i][j] = $4;
	}
}
endsnippet

snippet copenFile
// r reading,w write, a append
// r+ open for reading and writing
// w+ open for both reading and writing
// a+ open for both appending and reading
// append b for binary mode
ptr = fopen("${1:path}","${2:mode}");
endsnippet

snippet random
// float num = rand()%maxNUm;
srand(time(NULL));
endsnippet

snippet resizestr
${1:nombre} = realloc(p_nombre,30*sizeof(char));
endsnippet

snippet info
// Date: `date +%d/%B/%Y\ -\ %A`
// Author: Virgilio Murillo Ochoa
// personal github: Virgilio-AI
// linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
// contact: virgiliomurilloochoa1@gmail.com
// web: virgiliomurillo.com
endsnippet
snippet sk
// Date: `date +%d/%B/%Y\ -\ %A`
// Author: Virgilio Murillo Ochoa
// personal github: Virgilio-AI
// linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
// contact: virgiliomurilloochoa1@gmail.com
// web: virgiliomurillo.com
#include<bits/stdc++.h>
using namespace std;
const int N = ${2:1000};
int n,m,k,x,x2,x3,y,y2,y3,z,z2,z3,t1,t2,t3,ans;
void imat(int mat[N][N]);
void iar(int ar[N]);
void par(int ar[N],int m);
void pmat(int mat[N][N],int n,int m);

$3
int main()
{
	$1
	return 0;
}



void par(int ar[N],int n)
{
	for(int i=0;i<n;i++)
	{
		cout<<ar[i]<<" ";
	}
	cout<<endl;
}

void pmat(int mat[N][N],int n,int m)
{
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			cout<<mat[i][j]<<" ";
		}
		cout<<endl;
	}
	cout<<endl;
}

void imat(int mat[N][N])
{
	for(int i=0;i<N;i++)
	{
		for(int j=0;j<N;j++)
		{
			mat[i][j] = 0;
		}
	}
}

void iar(int ar[N])
{
	for(int i=0;i<N;i++)
	{
		ar[i] = 0;
	}
}

endsnippet

snippet sk_ncurses
// Fecha: `date +%d/%B/%Y\ -\ %A`
// Autor: Virgilio Murillo Ochoa
// github personal: Virgilio-AI
#include<bits/stdc++.h>
#include<ncurses.h>
using namespace std;
int main()
{
	initscr();

	${1:raw();// for line buffering disabled}
	${2:noecho(); //so that what we write doesn't gets seen}
	$3
	endwin();
	return 0;
}
endsnippet
snippet ndoc
// getch(); so you get a character
// printw(); print in screen
// refresh(); to refresh screen
endsnippet
