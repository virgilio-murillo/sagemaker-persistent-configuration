# Fecha: 12/November/2021 - Friday                                        #
# Autor: Virgilio Murillo Ochoa                                           #
# personal github: Virgilio-AI                                            #
# linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203  #
# contact: virgiliomurilloochoa1@gmail.com
# web: virgiliomurillo.com
# #########################################################################

# ========== configurations ======
# ========== global functions =
# def create_matrix_placeholders(snip)
# def returnCommandSplitted(command)
# def presetStatement
# def getMatchArr

# ========== !!! tempFunctions !!! ======

# ========== vim related ======
# sk -- for getting a skeleton
# info -- for getting info of the author

# ========== basic input output ======
# inset - define in port
# outset - define out port
# ioset -- define the port in input and output mode
# inp - for reading the whole port
# in - for reading a single pin
# out - for getting out a single pin
# outp - for getting out a hole port with a register

# ========== basic operations ======
# goto -- to jump to an other part of the code
# +   - to add
# -   - to substract
# mod -- to use the modulo operation
# mul -- to multipli

# ========== buttons ======
# retButton - ratard for button
# retButton_h -- retrado boton help
# traba - for retarding if the button is pressed

# ========== bcd display ======
# s-dis -- for setting the display
# m-dis -- for creating a menu for the display
# s-key -- for setting the display
# doubleNum -- for double numbers in the dispplay


# ========== comparisons ======
# if - similar to if
# goto - rjmp

# ========== asingning ======
# var - alias for a register
# = - for info on asingnign 
# def - for definition of port pin or ddr

# ========== keybaord ======
# m-key
# teclado_menu - a menu template for keyboard

# ========== timers and interruptions ======
# setint -- configuration for interruptions
# settim -- configurar los timers
# c-tim -- clean timers
# tim -- start timer
# pwm -- fast pwm for servomotors and lights
# s-pwm -- for help

# ******************* snippets




global !p
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""
	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"
	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]
	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''
	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal
post_jump "snip"
global !p
def returnCommandSplitted(command):
	cmd_arr = command.split('_')
	return_command = ""
	for a in cmd_arr:
		return_command += a + " "
	return_command = return_command[0:len(return_command)-1]
	return return_command
endglobal

post_jump "snip"
global !p

def parseStatement(i,j,k,stri):
	prev = ''
	twoBehind=''
	ans = ""
	for ch in stri:

		if ( ch == 'k' or ch == 'i' or ch == 'j' )  and prev == '$' and twoBehind == '\\':
			ans = ans[:-2]
			ans+=ch

		elif ch == 'i' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(i)
		elif ch == 'j' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(j)
		elif ch == 'k' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(k)
		elif ch == 'n' and prev == '\\':
			ans = ans[:-1]
			ans+="\n"

		else :
			ans+=ch

		twoBehind = prev
		prev = ch
	return ans

endglobal

global !p
def getMatchArr():
	cont=1
	arr = []
	while 1 :
		try :
			arr.append(match.group(cont))
			cont+=1
		except :
			break
	return arr
endglobal
# ==========================
# ========== temp Functions ======
# ==========================

# ==========================
# ========== vim related ======
# ==========================
snippet sk
;******************************************************
; ${2:Titulo del proyecto}
;
; Date: `date +%d/%B/%Y\ -\ %A`
; Author: Virgilio Murillo Ochoa
; github personal: Virgilio-AI
; contact: virgiliomurilloochoa1@gmail.com
; web: virgiliomurillo.com

; Miembros del equipo: Alfredo Castrellon
; $1

;******************************************************
.include "m16def.inc"
;******************************************************
;Registros (aquí pueden definirse)
;.def temporal=r19
;Palabras claves (aquí pueden definirse)
;.equ LCD_DAT=DDRC
;******************************************************
.org 0x0000
;Comienza el vector de interrupciones.
jmp RESET ; Reset Handler
jmp EXT_INT0 ; IRQ0 Handler
jmp EXT_INT1 ; IRQ1 Handler
jmp TIM2_COMP ; Timer2 Compare Handler
jmp TIM2_OVF ; Timer2 Overflow Handler
jmp TIM1_CAPT ; Timer1 Capture Handler
jmp TIM1_COMPA ; Timer1 CompareA Handler
jmp TIM1_COMPB ; Timer1 CompareB Handler
jmp TIM1_OVF ; Timer1 Overflow Handler
jmp TIM0_OVF ; Timer0 Overflow Handler
jmp SPI_STC ; SPI Transfer Complete Handler
jmp USART_RXC ; USART RX Complete Handler
jmp USART_UDRE ; UDR Empty Handler
jmp USART_TXC ; USART TX Complete Handler
jmp ADC_COMP ; ADC Conversion Complete Handler
jmp EE_RDY ; EEPROM Ready Handler
jmp ANA_COMP ; Analog Comparator Handler
jmp TWSI ; Two-wire Serial Interface Handler
jmp EXT_INT2 ; IRQ2 Handler
jmp TIM0_COMP ; Timer0 Compare Handler
jmp SPM_RDY ; Store Program Memory Ready Handler
; Termina el vector de interrupciones.
;******************************************************
;Aquí comenzará el programa
;******************************************************
Reset:
;Primero inicializamos el stack pointer...
ldi r16, high(RAMEND)
out SPH, r16
ldi r16, low(RAMEND)
out SPL, r16 
;******************************************************
;No olvides configurar al inicio los puertos que utilizarás
;También debes configurar si habrá o no pull ups en las entradas
;Para las salidas deberás indicar cuál es la salida inicial
;Los registros que vayas a utilizar inicializalos si es necesario
;******************************************************


; ******* setting input output ******************  inset, outset, ioset
$3

; ================= setint ===============

; ================= settim ======================


; ************** definition of variables ********* var

.def mull = R0            ;To hold lower part of the answer
.def mulr = R1            ;To hold biggest part of the answer
.def t1 = r16
ldi t1,0
.def t2 = r17
ldi t2,0
.def t3 = r18
ldi t3, 0

; ************** actions to do at the beggining ***

; ************* main program **********************

$0







;******************************************************
;Aquí están las rutinas para el manejo de las interrupciones concretas
;******************************************************
; guarda las banderas de comparacion


; for external interruptions backup TIFR
; in t1,TIFR
; push t1
; --- code
; pop t1
; out TIFR,t1


; also test the backup for this kind of interruptions
; GIFR
; SREG -- for the timer in the interruptions 

EXT_INT0: ; IRQ0 Handler
reti
EXT_INT1:
reti ; IRQ1 Handler
TIM2_COMP:
reti ; Timer2 Compare Handler
TIM2_OVF:
reti ; Timer2 Overflow Handler
TIM1_CAPT:
reti ; Timer1 Capture Handler
TIM1_COMPA:
reti ; Timer1 CompareA Handler
TIM1_COMPB:
reti ; Timer1 CompareB Handler
TIM1_OVF:
reti ; Timer1 Overflow Handler
TIM0_OVF:
reti ; Timer0 Overflow Handler
SPI_STC:
reti ; SPI Transfer Complete Handler
USART_RXC:
reti ; USART RX Complete Handler
USART_UDRE:
reti ; UDR Empty Handler
USART_TXC:
reti ; USART TX Complete Handler
ADC_COMP:
reti ; ADC Conversion Complete Handler
EE_RDY:
reti ; EEPROM Ready Handler
ANA_COMP:
reti ; Analog Comparator Handler
TWSI:
reti ; Two-wire Serial Interface Handler
EXT_INT2:
reti ; IRQ2 Handler
TIM0_COMP:
reti
SPM_RDY:
reti ; Store Program Memory Ready Handler
endsnippet

snippet info
; Fecha: `date +%d/%B/%Y\ -\ %A`
; Autor: Virgilio Murillo Ochoa
; personal github: Virgilio-AI
; linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
; contact: virgiliomurilloochoa1@gmail.com
; web: virgiliomurillo.com
endsnippet

# ==========================
# ========== basic input output ======
# ==========================

snippet ioset
; input = 0; output = 1; 76543210
ioset ${1:a-b-c-d} ${2:00000000}
endsnippet
snippet "ioset (\w) (\w+)" "set a port in a generic way" r
`!p
# match.group(#) for the current match
# snip.rv for the return value
def getDdrStrin(strin):
	ans = ""
	cont = 0
	for a in strin:
		if a == "0":
			ans+="0"
			cont+=1
			if cont == 4:
				ans+="_"
		else:
			ans+="1"
			cont+=1
			if cont == 4:
				ans+="_"
	return ans
def getPortStrin(strin):
	ans = ""
	cont = 0
	for a in strin:
		if a == "1":
			ans+="0"
			cont+=1
			if cont == 4:
				ans+="_"
		else:
			ans+="1"
			cont+=1
			if cont == 4:
				ans+="_"
	return ans

def setPort(letter,strin):
	ans=""
	strin1 = getDdrStrin(strin)
	strin2 = getPortStrin(strin)
	ans+= "ldi r16, 0b" + strin1 + "\n"
	ans+="out ddr" + str(letter) + ", r16\n"
	ans+="ldi r16, 0b" + str(strin2) + "\n"
	ans+="out port" + str(letter) + ",r16"
	return ans
snip.rv = setPort(str(match.group(1)),str(match.group(2)))
`
endsnippet
snippet inset
; input setting
; inmediate registers are bigger than 16
ldi r16, 0b0000_0000
out ddr${1:a-b-c-d}, r16
ldi r16, 0b1111_1111
out port$1, r16
endsnippet

snippet outset
; output setting
; name of register must be bigger than 16
ldi r16, 0b1111_1111
out ddr${1:a-b-c-d}, r16
ldi r16,0b0000_0000
out port$1,r16
endsnippet

snippet inp
; name of the register to load info
ldi $1, 0
in ${1:register}, pin${2:a-b-c-d}
com $1
endsnippet

snippet in
sbis pin${1:a-b-c-d}, ${2:0-7} ; check if pin is set
	jmp ${3:function} ; always return to main in this function
endsnippet


snippet out
;set clear
${1:s-c}bi port${2:a-b-c-d}, ${3:number_of_pin}
endsnippet

snippet outp
out port${1:a-b-c-d}, ${2:register}
endsnippet



# ==========================
# ========== basic operations ======
# ==========================

snippet mod
mod${1:number}$2:
ldi t2,1
modlock$1$2:
	subi t1,$1 ;number in t1
	inc t2
	cpi  t1,$1
		brsh modlock$1$2
	dec t2
	rjmp mod$1$2end
endsnippet

snippet goto
rjmp ${1:name}
; name:
endsnippet

snippet +
	subi ${1:register},-${2:number}
endsnippet

snippet -
	subi ${1:register},${2:number}
endsnippet

snippet mul
ldi ${1:temp_register},${2:number}
mul ${3:number_to_multiply},$1
mov $3,mull ; answer if the number is less that 256
;$4 mov, $1 mulr ; if the answer is bigger
endsnippet

# ==========================
# ========== buttons ======
# ==========================

snippet retButton
retButton:
	; 5000 for 1mhz
	; ============================= 
	;    delay loop generator 
	;     5000 cycles:
	; ----------------------------- 
	; delaying 4998 cycles:
			  ldi  t2, \$07
	WGLOOP0:  ldi  t1, $ED
	WGLOOP1:  dec  t1
			  brne WGLOOP1
			  dec  t2
			  brne WGLOOP0
	; ----------------------------- 
	; delaying 2 cycles:
			  nop
			  nop
	; ============================= 
ret
endsnippet

snippet retButton_h
;megahertz = 1/frecuencia del micro en ms
; ejemplo:
; 2mhz 
; #ciclos = (50 mili second - 100 mili seconds)/(1/2mhz)
endsnippet

snippet traba
traba$1:
	; after the action of the button is done
	rcall retButton
	retenido$1:
		; name of the register to load info
		sbis pin${3:a-b-c-d}, ${2:number_of_pin} ; check if pin is set
			rjmp retenido$1
	rcall retButton
	${4:ret|jmp main}
endsnippet


# ==========================
# ========== bcd display ======
# ==========================

snippet s-dis
display ${1:binary|proteus|raw} ${2:1=buttons|2=noButtons} ${3:rjmp main} ${4:pin} ${5:port}
endsnippet
snippet m-dis
menu ${1:register} ${2:return_command}
endsnippet
snippet "menu (\w+) (\w+)" "menu para display" r
`!p
def menuFunct(register,return_command):
	return_command = returnCommandSplitted(return_command)
	ans = "menu:\n"
	for a in range(0,10):
		ans+="cpi " + register + ","+ str(a)+"\n"
		ans+="\tbreq saltar_" + str(a) + "\n"
	ans += return_command
	return ans
snip.rv = menuFunct(str(match.group(1)),str(match.group(2)))
`
endsnippet
post_jump "create_matrix_placeholders(snip)"
snippet "(display) (binary|proteus|raw) (0|1) (\w+) (\w) (\w)" "configure the display" r
 `!p

def definitionOfDisplay(config,button,return_command,pin,port):
	return_command = returnCommandSplitted(return_command)
	# el arreglo de formas de hacer las cosas
	binary_values = [
	# raw values: for connecting manually
	['0b0000_0000','0b0100_1000','0b0011_1101','0b0110_1101','0b0100_1011','0b0110_0111','0b0111_0011','0b0100_1100','0b0111_1111','0b0100_1111'],
	# proteus values: the way is ment to be in documentation
	['0b0011_1111','0b0000_0110','0b0101_1011','0b0100_1111','0b0110_0110','0b0110_1101','0b0111_1101','0b0000_0111','0b0111_1111','0b0110_1111'],
	# binary values: the simplest way
	['0','1','2','3','4','5','6','7','8','9']
	]
	configInt = 0
	if config == "raw":
		configInt = 0
	elif config == "proteus":
		configInt = 1
	else:
		configInt = 2
	place1 = 1
	place2 = 2
	place3 = 3
	# primero para saltar
	ans = "" + str(t[1]) +  \
	"; ========================\n" \
	"; ======== definition of display ===\n" \
	"; ===============================\n"

	for i in range(0,10):
		ans +="saltar_" + str(i)+":\n"
		ans += "\trjmp sacar_" + str(i) + "\n"

	for i in range(0,10):
		ans += "sacar_" + str(i) + ":"  + "\n"
		ans += "\tldi t1," + binary_values[configInt][i] +"\n"
		ans += "\tout port"+port+"," + "t1" +"\n"
		if button == "1":
			ans += "\ttraba" + str(i)  + ":" + "\n"
			ans += "\t\t; name of the register to load info" + "\n"
			ans += "\t\trcall retButton" + "\n"
			ans += "\t\tretenido" + str(i) + ":" + "\n"
			ans += "\t\t\t; name of the register to load info" + "\n"
			ans += "\t\t\tsbis pin"+pin+",0 ; check if the pin is set" + "\n"
			ans += "\t\t\t\trjmp retenido" + str(i) + "\n"
			ans += "\t\t\trcall retButton"  + "\n"
		ans += "\n" +return_command + "\n"

	return ans
snip.rv = definitionOfDisplay(str(match.group(2)),str(match.group(3)),str(match.group(4)),str(match.group(5)),str(match.group(6)))
`
endsnippet

snippet doubleNum
mov t1,${1:number}
ldi t2,0
cpi t1, 10
	brsh mod$3$4
mod$3$4end:
rcall shiftLeft
or t1,t2
out port${2:a-b-c-d}, t1
endsnippet
# ==========================
# ========== comparisons ======
# ==========================

snippet if
cpi ${1:register}, ${2:binary_Number}
	breq $3
endsnippet
# ==========================
# ========== asingninng ======
# ==========================

snippet var
.def ${1:register_name} = ${2:register_number}
ldi $1, ${3:0b0000_0000|#|0x#}
endsnippet

snippet =
; set value to cero before doing anything
; mov reg_target, second_reg
; ldi reg_target, numerical value
endsnippet

snippet def
.equ ${1:nombre}_ddr = ddr${2:a-b-c-d}
.equ $1_port = port$2
.equ $1_pin = pin$2
endsnippet

# ==========================
# ========== keyboard ======
# ==========================

snippet s-key
teclado_set ${1:a-b-c-d} ${2:firstSection}_${3:secondSection} ${4:start}_${5:end} "${6:return statement}"
endsnippet

post_jump "create_matrix_placeholders(snip)"
snippet "teclado_set (\w) (\w+) (\w+) \"(.+)\"" "set the keyboardButtons" r
`!p
# match.group(#) for the current match
# snip.rv for the return value
def setKeyboard(letter,rows_cols,start_end,return_statement):
	ans = ""
	firstHalf = int(rows_cols.split('_')[0])
	secondHalf = int(rows_cols.split('_')[1])
	start = int(start_end.split('_')[0])
	end = int(start_end.split('_')[1])
	# return_statement = returnCommandSplitted(return_statement)
	counter=1
	tempCont=0


	for i in range(1,int(firstHalf)*int(secondHalf)+1):
		# the pin is j
		j = (i-1)%secondHalf + firstHalf +start
		counter+=1
		ans+="teclado_"+ str(i) + ":\n"
		ans+="ldi t1,"+str(i)+"\n"
		ans+="ldi t2,"+str(j)+"\n"
		ans+="rjmp options\n"
	ph = 1
	ans+=";codigo personalizado\n"
	ans+="options:\n"
	ans+= f"${ph}"
	ans+="\n"

	for r in range(start+firstHalf,start+firstHalf+secondHalf):
		ans+="cpi t2,"+str(r)+"\n"
		ans+="	breq traba_teclado"+str(r)+"\n"

	for r in range(start+firstHalf,start+firstHalf+secondHalf):
		ans+="traba_teclado" + str(r)+ ":\n"
		ans+="\trcall retButton" + "\n"
		ans+="\tretenido_teclado"+ str(r) + ":\n"
		ans+="\t\tsbis pin" + letter + ", " + str(r) + "\n"
		ans+="\t\trjmp retenido_teclado" + str(r) + "\n"
		ans+="\trcall retButton"  + "\n"
		ans+=str(return_statement) + "\n"
	return ans

snip.rv = setKeyboard(str(match.group(1)),str(match.group(2)),str(match.group(3)),str(match.group(4)))
`
endsnippet
post_jump "snip"

snippet m-key
teclado_menu ${1:a-b-c-d} ${2:firstSection}_${3:secondSection[both can be rows or cols]} ${4:start}_${5:end}
endsnippet
snippet "teclado_menu (\w) (\w+) (\w+)" "menu para el teclado" r
`!p
# snip.rv for the return value
def keyBoardFunction(letter,rows_cols,start_end):
	ans = ""
	firstHalf = int(rows_cols.split('_')[0])
	secondHalf = int(rows_cols.split('_')[1])
	start = int(start_end.split('_')[0])
	end = int(start_end.split('_')[1])
	counter=1
	tempCont=0

	#first load the port with ones
	ans+="; cbi = clear bit in register\n"
	ans+="ldi t1,0b"
	for a in range(end+1,8):
		ans+="0"
		tempCont+=1
		if tempCont == 4:
			ans+="_"
	for a in range(start,end+1):
		ans+="1"
		tempCont+=1
		if tempCont == 4:
			ans+="_"
	for a in range(0,start):
		ans+="0"
		tempCont+=1
		if tempCont == 4:
			ans+="_"
	

	ans+="\n"
	ans+="out port" + letter + ", t1\n\n"

	for i in range(start,start+firstHalf):
		if i != start:
			ans+="sbi port"+letter+"," + str(i-1) + "\n"
		ans+="cbi port" + letter + ", "+str(i)+"\n"
		ans+="nop\nnop\n"
		ans+="\n"
		for j in range(start+firstHalf,end+1):
			ans+="sbis pin" +letter+ "," + str(j) + "\n"
			ans+="\trjmp teclado_"+str(counter) + "\n"
			counter+=1
		ans+="\n"

	return ans

snip.rv = keyBoardFunction(str(match.group(1)),str(match.group(2)),str(match.group(3)))
`
endsnippet

# ==========================
# ========== timers and interruptions ======
# ==========================

snippet tim
	ldi t1,0b0000_0011 ; limpiar las banderas
	out TIFR,t1

	; -> ||||||||bit1|bit0
	; bit1 habilita las interrupciones por comparacion
	; bit2 habilita las interrupciones por overflow
	ldi t1,0b000000${1:00}
	out TIMSK,t1
endsnippet

snippet c-tim
	ldi t1, 0b0000_0011					;Limpiar banderas
	out TIFR, t1

	ldi t1, 0b0000_0000						;Deshabilita la interrupcion por comparacion
	out TIMSK, t1
endsnippet

snippet setint

; command to set interruptions
sei


; cargamos al registro GICR para abilitar las interrupciones de forma individual
; general interrupt control register
; |int1|int0|int2|-|-|-|IVSEL|IVCE|
; default 0, 1 to enable interruptions
ldi r16, 0b${1:0}${2:0}${3:0}00000
out GICR, r16

; cargamos al registro GIFR
; general interrupt flag register
; |intf1|intf0|intf2|-|-|-|-|-|
; limpiados por default, 0=interruption in use; 1=default
ldi r16, 0b1110_0000
out GIFR, r16

; cargamos al registro MCUCR
; configuracion de int0 y int1
; |sm2|se|sm1|isc11|isc10|isc01|isc00|
; same table with int1=isc11-isc10|int0=isc01-isc00|
; 0 0 -> low level 
; 0 1 -> any logical change
; 1 0 -> failing edge
; 1 1 -> rising edge
ldi r16, 0b0000_${4:00}${5:00}
out MCUCR, r16

; cargamos el registro MCUCSR
; para configurar int2
; |JTD|ISC2|-|JTRF|WDRF|BORF|EXTRF|PORF|
; ISC2 == 1 : flanco de subida
; ISC2 == 0 : flanco de bajada
ldi r16,0b0${6:0}000000
out MCUCSR,r16

endsnippet


snippet settim
; functions
; c-tim -- clean timer, tim -- start timers
sei
; cli -- for clear interruptions
; output compare register
ldi r16, ${1:0b1111_1001} ;Es un 249 a 4mHz para contar 0.004 segundos, hay que contar 250 interrupciones para un segundo
out OCR0, r16
; timer/counter flag register

; ||||||||ocf0|tov0|
; tov0 indica que se activo interrupcion debido al overflow
; ocf0 -> indica que se activo una interrupcion por comparacion
; 0 -> activa, 1-> desactivada
ldi r16, 0b0000_0011 ;Limpiar banderas
out TIFR, r16

; -> ||||||||bit1|bit0
; bit1 habilita las interrupciones por comparacion
; bit2 habilita las interrupciones por overflow

ldi r16, 0b000000${2:00} ;Empieza deshabilitada para que no empiece a contar solo	
out TIMSK, r16

; este es el contador principal y puede empezar en 0
ldi r16, 0								;Ponemos en cero el contador
out TCNT0, r16
; the frequency is:
;	f = (microcontroller hertz)/(ocrVal*preescaler)

; modo y preescaler
; |foc0|wgm00|com01|com00|wgm01|cs02|cs01|cs00|
;  mode                wgm00  wgm01
;  normal              0      0
;  pwm(phase_correct)  0      1 ; contador
;  ctc                 1      0
;  fastPWM             1      1 ; mandar ondas

;  cs02  cs01  cs00  description
;  0     0     0     (counter_stopped)
;  0     0     1     (no_preescaling)
;  0     1     0     8
;  0     1     1     64
;  1     0     0     256
;  1     0     1     1024
;  1     1     0     external_clock_source_on_to_pin(clock_on_failing_edge)
;  1     1     1     external_clock_source_on_to_pin(clock_on_rising_edge)

ldi r16, 0b0${3:0}00_${4:0}${5:011}	;Modo y preescaler
out TCCR0, r16
endsnippet



snippet s-pwm
; configura el puerto OC0 como de salida
; b3
endsnippet

snippet pwm
sei
ldi r16, 23	;Es un 249 a 4mHz para contar 0.004 segundos, hay que contar 250 interrupciones para un segundo
out OCR0, r16
ldi r16, 0b0000_0011					;Limpiar banderas
out TIFR, r16
ldi r16, 0b0000_0010						;Empieza deshabilitada para que no empiece a contar solo	
out TIMSK, r16
ldi r16, 0								;Ponemos en cero el contador
out TCNT0, r16

; the frequency is:
;	f = (microcontroller hertz)/(ocrVal*preescaler)

; modo y preescaler
; |foc0|wgm00|com01|com00|wgm01|cs02|cs01|cs00|
;  mode                wgm00  wgm01
;  normal              0      0
;  pwm(phase_correct)  0      1 ; contador
;  ctc                 1      0
;  fastPWM             1      1 ; mandar ondas

;  cs02  cs01  cs00  description
;  0     0     0     (counter_stopped)
;  0     0     1     (no_preescaling)
;  0     1     0     8
;  0     1     1     64
;  1     0     0     256
;  1     0     1     1024
;  1     1     0     external_clock_source_on_to_pin(clock_on_failing_edge)

;  com01  com00  Descripcion
;  0      0      normal_port_operations
;  0      1      reserved
;  1      0      clear_oc0_compare_on_match(not_inverting)
;  1      1      set_oc0_on-compare_match,clear_oc0_at_top(inverting)

ldi r16, 0b0${1:11}0_1${2:010}	;Modo y preescaler
out TCCR0, r16

; for songs
; ldi r16, 0b0001_1010	;Modo y preescaler
; out TCCR0, r16

endsnippet












