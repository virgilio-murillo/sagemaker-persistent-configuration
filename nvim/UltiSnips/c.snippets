
# ======= c ========
# iar -- for init array
# imat -- for init mat
# resizestr - to resize a c string
# random - to input the random function
# copenFile - to open a file in c style format

# ====== avr ======
# sk_avr -- sk for avr
# pOut -- puerto out
# pIn -- puertoIn
# outset -- to set the port for output
# inset -- to set the port for input
# pinIN -- pinIn
# pinOut -- pin out

# ======= keyboard ==== 
# teclado_menu
# m-key


# ===== interrupciones ==== 
# settim -- for setting the interruptions
# setint -- for setting the interruptions
# adc -- for setting the adc
# adcToFloat -- for converting the input of the adc to float

# ====== timers =====
# settim -- configurar los timers
# c-tim -- clean timers
# tim -- start timer

# ===== lcd ====
# lcd_char
# lcd_init
# lcd_pos
# lcd_string


# ===== serial ====
# serial_init
# serial_string
# serial_char







# ==========================
# ========== c =====
# ==========================


# options im-> inword
snippet sk "the basic structure of a c file"
#include<stdio.h>
int main()
{
	printf("hola mundo");
}
endsnippet
snippet iar
for(int i=0;i<$1;i++) $2[i] = $3;
endsnippet
snippet imat
for(int i=0;i<$2;i++)
{
	for(int j=0;j<$2;j++)
	{
		$3[i][j] = $4;
	}
}
endsnippet

snippet copenFile
// r reading,w write, a append
// r+ open for reading and writing
// w+ open for both reading and writing
// a+ open for both appending and reading
// append b for binary mode
ptr = fopen("${1:path}","${2:mode}");
endsnippet


snippet resizestr
${1:nombre} = realloc(p_nombre,30*sizeof(char));
endsnippet

snippet random
// float num = rand()%maxNUm;
srand(time(NULL));
endsnippet

snippet info
// Date: `date +%d/%B/%Y\ -\ %A`
// Author: Virgilio Murillo Ochoa
// personal github: Virgilio-AI
// linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
// contact: virgiliomurilloochoa1@gmail.com
// web: virgiliomurillo.com
endsnippet



# ==========================
# ========== avr ======
# ==========================
# options im-> inword
snippet outset "set for output"
DDR${1:A-B-C-D} = 255 ;
PORT$1 = 0 ;
endsnippet

snippet inset "set for input"
DDR${1:A-B-C-D} =0 ;
PORT$1 = 255 ;
endsnippet


# options im-> inword
snippet pinIn "pin in"
if(cero_en_bit(&PIN${2:A-B-C-D},${1:0}))
{
	$3
}
endsnippet
# options im-> inword
snippet pinOut "pin out"
if(saca_uno(&PIN${2:A-B-C-D},${1:0}))
{
	$3
}
endsnippet
# options im-> inword

snippet sk_avr "skeleton for c"

// Date: `date +%d/%B/%Y\ -\ %A`
// Author: Virgilio Murillo Ochoa
// personal github: Virgilio-AI
// linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
// contact: virgiliomurilloochoa1@gmail.com
// web: virgiliomurillo.com

#define F_CPU 1000000

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <avr/io.h>
#include<stdbool.h>

// /* Interrupt vectors */
// /* External Interrupt 0 */
// #define INT0_vect _VECTOR(1)
// /* External Interrupt 1 */
// #define INT1_vect _VECTOR(2)
// /* Timer/Counter2 Compare Match */
// #define TIMER2_COMP_vect _VECTOR(3)
// /* Timer/Counter2 Overflow */
// #define TIMER2_OVF_vect _VECTOR(4)
// /* Timer/Counter1 Capture Event */
// #define TIMER1_CAPT_vect _VECTOR(5)
// /* Timer/Counter1 Compare Match A */
// #define TIMER1_COMPA_vect _VECTOR(6)
// /* Timer/Counter1 Compare Match B */
// #define TIMER1_COMPB_vect _VECTOR(7)
// /* Timer/Counter1 Overflow */
// #define TIMER1_OVF_vect _VECTOR(8)
// /* Timer/Counter0 Overflow */
// #define TIMER0_OVF_vect _VECTOR(9)
// /* SPI Serial Transfer Complete */
// #define SPI_STC_vect _VECTOR(10)
// /* USART, RX Complete */
// #define USART_RX_vect _VECTOR(11)
// /* USART Data Register Empty */
// #define USART_UDRE_vect _VECTOR(12)
// /* USART, TX Complete */
// #define USART_TX_vect _VECTOR(13)
// /* ADC Conversion Complete */
// #define ADC_vect _VECTOR(14)
// /* EEPROM Ready */
// #define EE_RDY_vect _VECTOR(15)
// /* Analog Comparator */
// #define ANA_COMP_vect _VECTOR(16)
// /* Two-wire Serial Interface */
// #define TWI_vect _VECTOR(17)
// /* External Interrupt Request 2 */
// #define INT2_vect _VECTOR(18)
// /* TimerCounter0 Compare Match */
// #define TIMER0_COMP_vect _VECTOR(19)
// /* Store Program Memory Read */
// #define SPM_RDY_vect _VECTOR(20)

#define DDRLCD DDRC
#define PORTLCD PORTC
#define PINLCD PINC

#define LCD_Cmd_Clear      0b00000001
#define LCD_Cmd_Home       0b00000010
//#define LCD_Cmd_Mode     0b000001 ID  S
#define LCD_Cmd_ModeDnS	   0b00000110 //sin shift cuconeccion[0]or a la derecha
#define LCD_Cmd_ModeInS	   0b00000100 //sin shift cuconeccion[0]or a la izquierda
#define LCD_Cmd_ModeIcS	   0b00000111 //con shift desplazamiento a la izquierda
#define LCD_Cmd_ModeDcS	   0b00000101 //con shift desplazamiento a la derecha
//#define LCD_Cmd_OnOff    0b00001 D C B
#define LCD_Cmd_Off		   0b00001000
#define LCD_Cmd_OnsCsB	   0b00001100
#define LCD_Cmd_OncCsB     0b00001110
#define LCD_Cmd_OncCcB     0b00001111
//#define LCD_Cmd_Shift    0b0001 SC  RL 00
//#define LCD_Cmd_Function 0b001 DL  N  F  00
#define LCD_Cmd_Func2Lin   0b00101000
#define LCD_Cmd_Func1LinCh 0b00100000
#define LCD_Cmd_Func1LinG  0b00100100
//#define LCD_Cmd_DDRAM    0b1xxxxxxx
				//RS,rw,e,Bf,  D4,D5,D6,D7
int coneccion[]={4,5,6,7,0,1,2,3};


int teclado_dispocicion[4][4] = {
	{7,8,9,10},	   // fila1
	{4,5,6, 11},	   // f2
	{1,2,3, 12},	   // f3
	{16, 0, 14, 13}
}; // f4
// c1 c2 c3 c4
int coneccion_teclado[2][4] = {
	{7, 6, 5, 4},  // filas
	{3, 2, 1, 0}
}; // columnas

uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT);
uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT);
void saca_uno(volatile uint8_t *LUGAR, uint8_t BIT);
void saca_cero(volatile uint8_t *LUGAR, uint8_t BIT);
void LCD_wr_inst_ini(uint8_t instruccion);
void LCD_wr_char(uint8_t data);
void LCD_wr_instruction(uint8_t instruccion);
void LCD_wait_flag(void);
void LCD_init(void);
void LCD_wr_string(char *s);
int pocicion_inicio(int pos,int linea);
int ordenar_dato_pos_correcta(int data,int parte);
//teclado
void teclado();


// teclado franz

void teclado4x3(volatile uint8_t *puerto,volatile uint8_t *pin,int teclado_dispocicion[][3],int coneccion_teclado[][4]);

int teclado4x4_simple(volatile uint8_t *puerto,volatile uint8_t *pin,int teclado_dispocicion[][4],int coneccion_teclado[][4]);


void teclado4x3(volatile uint8_t *puerto,volatile uint8_t *pin,int teclado_dispocicion[][3],int coneccion_teclado[][4]);
void hacer_antes();
void hacer_despues();
void hacer_mientras();
void cambiar_a_0(volatile   uint8_t *puerto, uint8_t pos);
void cambiar_a_1(volatile   uint8_t *puerto, uint8_t pos);

void reverse(char* str, int len);
int intToStr(int x, char str[], int d);
void ftoa(float n, char* res, int afterpoint);

// eprom
void  eprom_write_unit(uint8_t dato,uint16_t direccion);
int eprom_read_unit(uint16_t direccion);

void SerialInit(long USART_BAUDRATE,int stopbits,int char_size);
void SerialPutChar(char c);
void SerialPutString(char* s);




int letra='a';

int main(void)
{
	// salida
	DDRB = 255 ;
	PORTB = 0 ;

	// teclado
	DDRA = 0b00001111;
	PORTA = 0b11110000;
	$1
	while (1)
	{
		int num = teclado4x4_simple(&PORTA,&PINA,teclado_dispocicion,coneccion_teclado);
		if(num != 17)
		{
		PORTB = num;
		}
	}
}
ISR(TIMER0_COMP_vect){

}

int cambiar_a_modo_lectura(){
	int x=0; 
	for (int i =0;i<3;i++)
	{			
		x|= (1<<(coneccion[i]));			
	}
	return x;
}
int cambiar_a_modo_escritura(){
	int x=0; 
	for (int i =0;i<8;i++)
	{			
		x|= (1<<(coneccion[i]));			
	}
	return x;
}
int hay0(uint8_t num, uint8_t pos)
{
	if (num & (1 << pos)){
		return 0;
	}
	return 1;
}
int hay1(uint8_t num, uint8_t pos)
{
	if (num & (1 << pos)){
		return 1;
	}
	return 0;
}
int pocicion_inicio(int pos,int linea){
	if(linea == 2){
		return (0x40+pos)|0x80;
	}else{
		return (0x00+pos)|0x80;
	}
}
void LCD_wr_string(char *s){
	uint8_t c;
	while((c=*s++)){
		LCD_wr_char(c);
	}
}
void LCD_init(void){
	DDRLCD=cambiar_a_modo_lectura();
	_delay_ms(15);
	LCD_wr_inst_ini(0b00000011);
	_delay_ms(5);
	LCD_wr_inst_ini(0b00000011);
	_delay_us(100);
	LCD_wr_inst_ini(0b00000011);
	_delay_us(100);
	LCD_wr_inst_ini(0b00000010);
	_delay_us(100);	
	LCD_wr_instruction(LCD_Cmd_Func2Lin); //4 Bits, n?mero de l?neas y tipo de letra
	LCD_wr_instruction(LCD_Cmd_Off); //apaga el display
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S	
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
}

int ordenar_dato_pos_correcta(int data,int parte){
	int x =0;
	if(parte ==1){
		
		for (int i =0;i<4;i++)
		{
			if(hay1(data,8-i-1)){
				x|= (1<<(coneccion[8-i-1]));
			}
		}
	}else if(parte==2){
		for (int i =0;i<4;i++)
		{
			if(hay1(data,4-i-1)){
				x|= (1<<(coneccion[8-i-1]));
			}
		}
	}
	return x;
}
void sacar_intruccion(){
	saca_cero(&PORTLCD,coneccion[0]);
	saca_cero(&PORTLCD,coneccion[1]);
	saca_uno(&PORTLCD,coneccion[2]);
	_delay_ms(10);
	saca_cero(&PORTLCD,coneccion[2]);
}
void sacar_dato(){
	saca_uno(&PORTLCD,coneccion[0]);
	saca_cero(&PORTLCD,coneccion[1]);
	saca_uno(&PORTLCD,coneccion[2]);
	_delay_ms(10);
	saca_cero(&PORTLCD,coneccion[2]);
}
void LCD_wr_char(uint8_t data){
	//saco la parte m?s significativa del dato
	PORTLCD=ordenar_dato_pos_correcta(data,1);
	 //Saco el dato y le digo que escribir? un dato
	sacar_dato();
	//saco la parte menos significativa del dato
	PORTLCD=ordenar_dato_pos_correcta(data,2); //Saco el dato y le digo que escribir? un dato
	sacar_dato();	
	saca_cero(&PORTLCD,coneccion[0]);	
	LCD_wait_flag();	
}
void LCD_wr_inst_ini(uint8_t instruccion){ 
	PORTLCD=ordenar_dato_pos_correcta(instruccion,1)|ordenar_dato_pos_correcta(instruccion,2); //Saco el dato y le digo que escribir? un dato
	sacar_intruccion();
}
void LCD_wr_instruction(uint8_t instruccion){
	PORTLCD=ordenar_dato_pos_correcta(instruccion,1); 
	sacar_intruccion();
	PORTLCD=ordenar_dato_pos_correcta(instruccion,2); 
	sacar_intruccion();
	LCD_wait_flag();
}
void LCD_wait_flag(void){
//	_delay_ms(100);
	DDRLCD=cambiar_a_modo_lectura(); //Para poner el pin BF como entrada para leer la bandera lo dem?s salida
	saca_cero(&PORTLCD,coneccion[0]);// Instrucci?n
	saca_uno(&PORTLCD,coneccion[1]); // Leer	
	int x = 0;	
	while(!x && x%2==0){
		//pregunto por el primer nibble
		saca_uno(&PORTLCD,coneccion[2]); 
		_delay_ms(10);
		saca_cero(&PORTLCD,coneccion[2]);	
		x = uno_en_bit(&PINLCD,coneccion[4]);
		//pregunto por el segundo nibble
		saca_uno(&PORTLCD,coneccion[2]); 
		_delay_ms(10);
		saca_cero(&PORTLCD,coneccion[2]);		
	}
	//entonces cuando tenga cero puede continuar con esto...
	saca_cero(&PORTLCD,coneccion[0]);
	saca_cero(&PORTLCD,coneccion[1]);	
	DDRLCD=cambiar_a_modo_escritura();
}
uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (!(*LUGAR&(1<<BIT)));
}
uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (*LUGAR&(1<<BIT));
}
void saca_uno(volatile uint8_t *LUGAR, uint8_t BIT){
	*LUGAR=*LUGAR|(1<<BIT);
}
void saca_cero(volatile uint8_t *LUGAR, uint8_t BIT){
	*LUGAR=*LUGAR&~(1<<BIT);
}

void imprimirDisplay(int num)
{
	PORTB = num;
}

void teclado()
{
	uint8_t temp = 0b11111110;
	PORTA = temp ;
	int counter = 1;
	for(int i=0;i<4;i++)
	{
		for(int j=4;j<8;j++)
		{
			if(cero_en_bit(&PINA,j) && cero_en_bit(&PINA,i))
			{
				_delay_ms(50);
				imprimirDisplay(counter);
				while(cero_en_bit(&PINA,j)){}
				_delay_ms(50);
			}
			counter++;
		}
		
		temp = (temp << 1);
		temp = (temp | 0b00000001) ;
		PORTA = temp ;
		
		if(i == 3){
			counter = 1;
		}
	}
}


// teclado 
void teclado4x4(volatile uint8_t *puerto,volatile uint8_t *pin,int teclado_dispocicion[][4],int coneccion_teclado[][4]){
	*puerto = 0xFF;
	for (int i =0;i<4;i++)
	{
		cambiar_a_0(puerto,coneccion_teclado[1][i]);
		for (int j =0;j<4;j++){
			if (cero_en_bit(pin, coneccion_teclado[0][j]))
			{
				hacer_antes(teclado_dispocicion[j][i]);
				_delay_ms(50);
				while (cero_en_bit(pin, coneccion_teclado[0][j]))
				{
					hacer_mientras(teclado_dispocicion[j][i]);					
				}
				_delay_ms(50);
				hacer_despues(teclado_dispocicion[j][i]);
			}
			
		}
		cambiar_a_1(puerto,coneccion_teclado[1][i]);
	}
}
int teclado4x4_simple(volatile uint8_t *puerto,volatile uint8_t *pin,int teclado_dispocicion[][4],int coneccion_teclado[][4]){
	*puerto = 0xFF;
	for (int i =0;i<4;i++)
	{
		cambiar_a_0(puerto,coneccion_teclado[1][i]);
		for (int j =0;j<4;j++){
			if (cero_en_bit(pin, coneccion_teclado[0][j]))
			{
				_delay_ms(50);
				while (cero_en_bit(pin, coneccion_teclado[0][j]))
				{
				}
				_delay_ms(50);
				return teclado_dispocicion[j][i];
			}
			
		}
		cambiar_a_1(puerto,coneccion_teclado[1][i]);
	}
	return 17;
}
void teclado4x3(volatile uint8_t *puerto,volatile uint8_t *pin,int teclado_dispocicion[][3],int coneccion_teclado[][4]){
	*puerto = 0xFF;
	for (int i =0;i<3;i++)
	{
		cambiar_a_0(puerto,coneccion_teclado[1][i]);
		for (int j =0;j<4;j++){
			if (cero_en_bit(pin, coneccion_teclado[0][j]))
			{
				hacer_antes(teclado_dispocicion[j][i]);
				_delay_ms(50);
				while (cero_en_bit(pin, coneccion_teclado[0][j]))
				{
					hacer_mientras(teclado_dispocicion[j][i]);					
				}
				_delay_ms(50);
				hacer_despues(teclado_dispocicion[j][i]);
			}
			
		}
		cambiar_a_1(puerto,coneccion_teclado[1][i]);
	}
}

void hacer_despues()
{
}
void hacer_mientras()
{
}
void hacer_antes()
{
}


void cambiar_a_0(volatile   uint8_t *puerto, uint8_t pos){
	*puerto &= ~(1<<pos);
}
void cambiar_a_1(volatile   uint8_t *puerto, uint8_t pos){
	*puerto |= (1<<pos);
}

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
	while (i < j) {
		temp = str[i];
		str[i] = str[j];
		str[j] = temp;
		i++;
		j--;
	}
}
int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
		str[i++] = (x % 10) + '0';
		x = x / 10;
	}

	while (i < d)
	str[i++] = '0';

	reverse(str, i);
	str[i] = '\0';
	return i;
}
void ftoa(float n, char* res, int afterpoint)
{
	int ipart = (int)n;

	float fpart = n - (float)ipart;

	int i = intToStr(ipart, res, 0);

	if (afterpoint != 0) {
		res[i] = '.'; 

		fpart = fpart * pow(10, afterpoint);

		intToStr((int)fpart, res + i + 1, afterpoint);
	}
}

void  eprom_write_unit(uint8_t dato,uint16_t direccion){
	while(EECR & (1 << EEWE));
	EEAR = direccion;
	EEDR = dato;
	cli();
	EECR |= (1 << EEMWE);
	EECR |= (1 << EEWE);
	sei();
}
int eprom_read_unit(uint16_t direccion){
	while(EECR & (1 << EEWE));
	EEAR = direccion;
	EECR |= (1 << EERE);
	return EEDR;
}


void SerialInit(long USART_BAUDRATE,int stopbits,int char_size)
{
	saca_uno(&DDRD,1);
	saca_cero(&DDRD,0);
	UCSRB |= (1 << RXEN) | (1 << TXEN)|(1 << RXCIE);	// resepcion transmicion interrupcion
	/* Set frame format: 8data, 2stop bit */
	switch(char_size){
		case 9:
			char_size = 7;
		break;
		default:
			char_size-=5;	
	}
	//UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
	UCSRC = (1<<URSEL) | ((stopbits-1)<<USBS) | (char_size<<UCSZ0);
	UBRRL = BAUD_PRESCALE;			/* Load lower 8-bits of the baud rate */
	UBRRH = (BAUD_PRESCALE >> 8);		/* Load upper 8-bits*/
}

void SerialPutChar(char c) {
	while (!(UCSRA & (1 << UDRE)));
	UDR = c;
}

void SerialPutString(char* s) {
	while (*s)
	SerialPutChar(*s++);
}
endsnippet

# options im-> inword
snippet pOut "for output the port"
$1 = PORT${2:A-B-C-D} ;
endsnippet

# options im-> inword
snippet pIn "for input the port"
PORT${1:A-B-C-D} = ${2} ;
endsnippet

# options im-> inword
snippet outSet "set the port for output"
DDR${1:A-B-C-D} = 255 ;
PORT$1 = 0 ; 
endsnippet

# options im-> inword
snippet inSet "set the input"
DDR${1:A-B-C-D} = 0 ;
PORT$1 = 255 ;
endsnippet
# options im-> inword

snippet ioset
// input = 0; output = 1; 76543210
ioset ${1:A-B-C-D} ${2:00000000}
endsnippet

snippet "ioset (\w) (\w+)" "set a port in a generic way" r
`!p
# match.group(#) for the current match
# snip.rv for the return value
def getDdrStrin(strin):
	ans = ""
	cont = 0
	for a in strin:
		if a == "0":
			ans+="0"
			cont+=1
			if cont == 4:
				ans+="_"
		else:
			ans+="1"
			cont+=1
			if cont == 4:
				ans+="_"
	return ans
def getPortStrin(strin):
	ans = ""
	cont = 0
	for a in strin:
		if a == "1":
			ans+="0"
			cont+=1
			if cont == 4:
				ans+="_"
		else:
			ans+="1"
			cont+=1
			if cont == 4:
				ans+="_"
	return ans

def setPort(letter,strin):
	ans=""
	strin1 = getDdrStrin(strin)
	strin2 = getPortStrin(strin)

	ans+="DDR"+str(letter)+" = 0b"+str(strin1)+" ;\n"
	ans+="PORT"+str(letter)+" = 0b"+str(strin2)+" ; \n "

	return ans
snip.rv = setPort(str(match.group(1)),str(match.group(2)))
`
endsnippet

# ==========================
# ========== keyboard ======
# ==========================

snippet m-key
teclado_menu ${1:a-b-c-d} ${2:firstSection}_${3:secondSection[both can be rows or cols]} ${4:start}_${5:end}
endsnippet
snippet "teclado_menu (\w) (\w+) (\w+)" "menu para el teclado" r
`!p
# snip.rv for the return value
def keyBoardFunction(letter,rows_cols,start_end):
	ans = ""
	firstHalf = int(rows_cols.split('_')[0])
	secondHalf = int(rows_cols.split('_')[1])
	start = int(start_end.split('_')[0])
	end = int(start_end.split('_')[1])
	counter=1
	tempCont=0

	#first load the port with ones
	ans+="; cbi = clear bit in register\n"
	ans+="ldi t1,0b"
	for a in range(end+1,8):
		ans+="0"
		tempCont+=1
		if tempCont == 4:
			ans+="_"
	for a in range(start,end+1):
		ans+="1"
		tempCont+=1
		if tempCont == 4:
			ans+="_"
	for a in range(0,start):
		ans+="0"
		tempCont+=1
		if tempCont == 4:
			ans+="_"
	

	ans+="\n"
	ans+="out port" + letter + ", t1\n\n"

	for i in range(start,start+firstHalf):
		if i != start:
			ans+="sbi port"+letter+"," + str(i-1) + "\n"
		ans+="cbi port" + letter + ", "+str(i)+"\n"
		ans+="nop\nnop\n"
		ans+="\n"
		for j in range(start+firstHalf,end+1):
			ans+="sbis pin" +letter+ "," + str(j) + "\n"
			ans+="\trjmp teclado_"+str(counter) + "\n"
			counter+=1
		ans+="\n"

	return ans

snip.rv = keyBoardFunction(str(match.group(1)),str(match.group(2)),str(match.group(3)))
`
endsnippet



# ==========================
# ========== interrupciones ======
# ==========================

snippet setint

// command to set interruptions
sei() ;


// cargamos al registro GICR para abilitar las interrupciones de forma individual
// general interrupt control register
// |int1|int0|int2|-|-|-|IVSEL|IVCE|
// default 0, 1 to enable interruptions
GICR = 0b${1:0}${2:0}${3:0}00000 ;

// cargamos al registro GIFR
// general interrupt flag register
// |intf1|intf0|intf2|-|-|-|-|-|
// limpiados por default, 0=interruption in use// 1=default
GIFR = 0b11100000 ;

// cargamos al registro MCUCR
// configuracion de int0 y int1
// |sm2|se|sm1|isc11|isc10|isc01|isc00|
// same table with int1=isc11-isc10|int0=isc01-isc00|
// 0 0 -> low level 
// 0 1 -> any logical change
// 1 0 -> failing edge
// 1 1 -> rising edge
MCUCR = 0b0000_${4:00}${5:00} ;

// cargamos el registro MCUCSR
// para configurar int2
// |JTD|ISC2|-|JTRF|WDRF|BORF|EXTRF|PORF|
// ISC2 == 1 : flanco de subida

// ISC2 == 0 : flanco de bajada

MCUCSR = 0b0${6:0}000000 ; 


endsnippet


snippet adc

// DDRA = 0;
// PORTA = 0;


// ADMUX = REFS1|REFS0|ADLAR|MUX4|MUX3|MUX2|MUX1|MUX0
// MUX4|MUX3|MUX2|MUX1|MUX0
// 00000 -- adc0
// 00001 -- adc1
// 00010 -- adc2
// 00011 -- adc3
// 00100 -- adc4
// 00101 -- adc5
// 00110 -- adc6
// 00111 -- adc7

ADMUX=0b011${1:00000};

//ADCSRA=ADEN|ADSC|ADATE|ADIF|ADIE|ADPS2|ADPS1|ADPS0
// ADEN -- para activar conversion
// ADSC -- para empezar conversion
// ADATE -- para iniciar conversion
// ADIF -- bandera de interrupcion
// ADIE -- Habilita interrupcion al terminar
// ADPS2|ADPS1|ADPS0
// 000 -- 2
// 001 -- 2
// 010 -- 4
// 011 -- 8
// 100 -- 16
// 101 -- 32
// 110 -- 64
// 111 -- 128

ADCSRA=0b10011${2:101};

// SFIOR = ADTS2|ADTS1|ADTS0|||||
//	ADTS2 ADTS1 ADTS0
//	0 0 0 - free running
//	0 0 1 - analog comparator
//	0 1 0 - external interrupt request
//	0 1 1 - times/conter0 compare match
//	1 0 0 - timer/counter1 overflow
//	1 0 1 - timer/counter1 overflow
//	1 1 0 - timer/counter1 overflow
//	1 1 1 - timer/counter1 captura event

SFIOR = ${2:011}00000;


endsnippet

# options im-> inword
snippet adcToFloat "to convert the adc to float"

// float voltaje3;
// char voltString3[10];
// char previous3[10];

// ADMUX = REFS1|REFS0|ADLAR|MUX4|MUX3|MUX2|MUX1|MUX0
// MUX4|MUX3|MUX2|MUX1|MUX0
// 00000 -- adc0
// 00001 -- adc1
// 00010 -- adc2
// 00011 -- adc3
// 00100 -- adc4
// 00101 -- adc5
// 00110 -- adc6
// 00111 -- adc7

ADMUX=0b011${1:00000};

//SFIOR = 0;


//ADCSRA=ADEN|ADSC|ADATE|ADIF|ADIE|ADPS2|ADPS1|ADPS0
// ADEN -- para activar conversion
// ADSC -- para empezar conversion
// ADATE -- para iniciar conversion
// ADIF -- bandera de interrupcion
// ADIE -- Habilita interrupcion al terminar
// ADPS2|ADPS1|ADPS0
// 000 -- 2
// 001 -- 2
// 010 -- 4
// 011 -- 8
// 100 -- 16
// 101 -- 32
// 110 -- 64
// 111 -- 128

ADCSRA=0b10011${2:101};
ADCSRA = 0b10010101;
ADCSRA = ADCSRA | (1 << ADSC);
while(uno_en_bit(&ADCSRA, ADSC)){}
voltaje3 = (float)ADC;
voltaje3 = (float)((voltaje3*5)/1023);
ftoa(voltaje3, voltString3, 4);
if(voltString3 != previous3){
	printRed(voltaje3);
	strcpy(previous3, voltString3);
}

endsnippet


snippet settim
// functions
// c-tim -- clean timer, tim -- start timers
sei();
// cli -- for clear interruptions
// output compare register

OCR0 = ${1:0b11111001} ; //Es un 249 a 4mHz para contar 0.004 segundos, hay que contar 250 interrupciones para un segundo
// timer/counter flag register

// ||||||||ocf0|tov0|
// tov0 indica que se activo interrupcion debido al overflow
// ocf0 -> indica que se activo una interrupcion por comparacion
// 0 -> activa, 1-> desactivada
TIFR = 0b00000011 ;

// -> ||||||||bit1|bit0
// bit1 habilita las interrupciones por comparacion
// bit2 habilita las interrupciones por overflow

TIMSK = 0b000000${2:00} ; //Empieza deshabilitada para que no empiece a contar solo

// este es el contador principal y puede empezar en 0
//Ponemos en cero el contador
// TCNT1,TCNT2
TCNT0 = 0;
// the frequency is:
//	f = (microcontroller hertz)/(ocrVal*preescaler)

// modo y preescaler
// |foc0|wgm00|com01|com00|wgm01|cs02|cs01|cs00|
//  mode                wgm00  wgm01
//  normal              0      0
//  pwm(phase_correct)  0      1 // contador
//  ctc                 1      0
//  fastPWM             1      1 // mandar ondas

//  cs02  cs01  cs00  description
//  0     0     0     (counter_stopped)
//  0     0     1     (no_preescaling)
//  0     1     0     8
//  0     1     1     64
//  1     0     0     256
//  1     0     1     1024
//  1     1     0     external_clock_source_on_to_pin(clock_on_failing_edge)
//  1     1     1     external_clock_source_on_to_pin(clock_on_rising_edge)

TCCR0 = 0b0${3:0}00_${4:0}${5:011}; //Modo y preescaler
endsnippet

snippet c-tim
	TIFR = 0b00000011 ; // limpiar banderas
	TIMSK = 0b00000000 ; //Deshabilita la interrupcion por comparacion
endsnippet

snippet tim
	TIFR = 0b00000011 // limpiar las banderas

	// -> ||||||||bit1|bit0
	// bit1 habilita las interrupciones por comparacion
	// bit2 habilita las interrupciones por overflow
	TIMSK = 0b000000${1:00} ;
endsnippet

# options im-> inword
snippet lcd_char "for adding a char"
// adds a char to the right
LCD_wr_char(letra);
endsnippet

# options im-> inword
snippet lcd_init "init lcd"
// inits the lcd
LCD_init();
endsnippet

# options im-> inword
snippet lcd_pos "for the position of the cursor"
// sets the cursor position
// starts in 0,1  x,y
LCD_wr_instruction(pocicion_inicio(0,0));
endsnippet

# options im-> inword
snippet lcd_string "for writing a string"
LCD_wr_string($1);
endsnippet



# ==========================
# ========== serial ======
# ==========================

# options im-> inword
snippet serial_init "para iniciar el serial"
	// baud,stop bits, ocho bits de tamanio
	SerialInit(4800,1,8);
// ISR(USART_RXC_vect)
// {
// 	char dato = UDR;
// 	LCD_wr_char(dato);
// }
endsnippet


# options im-> inword
snippet serial_string "for strings in serial"
SerialPutString($1);
endsnippet

# options im-> inword
snippet serial_char "for char in serial"
SerialPutChar($1);
endsnippet
