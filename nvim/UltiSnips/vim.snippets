# conditionals
# info
# sec
# if -- simple if
# sk -- simple skeleton
# cin -- read string from input
# conditionals -- for expanation of conditionals
# forString -- traverse string in a for
# modifiers -- for modifiers explanation
# sleep -- command to wait for a certain time
# terminal -- execute command on external terminal









# ==========================
# ========== global snippets ======
# ==========================

global !p
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""
	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"
	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]
	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''
	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal
post_jump "snip"
global !p
def returnCommandSplitted(command):
	cmd_arr = command.split('_')
	return_command = ""
	for a in cmd_arr:
		return_command += a + " "
	return_command = return_command[0:len(return_command)-1]
	return return_command
endglobal

post_jump "snip"
global !p

def parseStatement(i,j,k,stri):
	prev = ''
	twoBehind=''
	ans = ""
	for ch in stri:

		if ( ch == 'k' or ch == 'i' or ch == 'j' )  and prev == '$' and twoBehind == '\\':
			ans = ans[:-2]
			ans+=ch

		elif ch == 'i' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(i)
		elif ch == 'j' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(j)
		elif ch == 'k' and prev == '$' and twoBehind != '\\':
			ans = ans[:-1]
			ans+=str(k)
		elif ch == 'n' and prev == '\\':
			ans = ans[:-1]
			ans+="\n"

		else :
			ans+=ch

		twoBehind = prev
		prev = ch
	return ans

endglobal

global !p
def getMatchArr():
	cont=1
	arr = []
	while 1 :
		try :
			arr.append(match.group(cont))
			cont+=1
		except :
			break
	return arr
endglobal







snippet terminal
	let l:terminalExe = ':AsyncRun st -T "floating" -e sh -c "'
	let l:endTerminalExe = ' ; rean -n1 "'
endsnippet

snippet sleep
" 1 -- seconds
" 2m -- miliseconds
sleep ${1:time}
endsnippet
snippet modifiers
	" % - relative path
	" %:p - absolute path
	" %< - for filename without extension
	" use expand('')
endsnippet
snippet forString
let l:${1:chars} = split(l:${2:Temp},'\zs')
let l:strlen = len(l:$2)
let l:${3:cont} =0
while l:$3 < l:strlen
	${4:let l:Name = l:Name . l:chars[l:cont]}
	let l:$3 = l:$3 + 1
endwhile
endsnippet

snippet conditionals
" c style conditionals == != && || 
endsnippet

snippet info
" Date: `date +%d/%B/%Y\ -\ %A`
" Author: Virgilio Murillo Ochoa
" personal github: Virgilio-AI
" linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
" contact: virgiliomurilloochoa1@gmail.com
" web: virgiliomurillo.com
endsnippet

snippet sk
" Date: `date +%d/%B/%Y\ -\ %A`
" Author: Virgilio Murillo Ochoa
" personal github: Virgilio-AI
" linkedin: https://www.linkedin.com/in/virgilio-murillo-ochoa-b29b59203
" contact: virgiliomurilloochoa1@gmail.com
" web: virgiliomurillo.com
endsnippet


snippet sec
" =================================
" ========== $1 
" =================================
$2
endsnippet

snippet if
if $1
	$2
endif
endsnippet

snippet cin
let ${1:tempchar} = input("$2")
endsnippet

